<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java屏蔽序列化版本不一致异常</title>
    <link href="/2025/04/28/Java%E5%B1%8F%E8%94%BD%E5%BA%8F%E5%88%97%E5%8C%96%E7%89%88%E6%9C%AC%E4%B8%8D%E4%B8%80%E8%87%B4%E5%BC%82%E5%B8%B8/"/>
    <url>/2025/04/28/Java%E5%B1%8F%E8%94%BD%E5%BA%8F%E5%88%97%E5%8C%96%E7%89%88%E6%9C%AC%E4%B8%8D%E4%B8%80%E8%87%B4%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<p>经常会碰到实现了序列化接口，但是忘记添加序列化id，导致线上的数据无法被正常的反序列化</p><p>使用CompatibleInputStream代替ObjectInputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理 jdk 序列化反序列化时，uid不一样的情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompatibleInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CompatibleInputStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="built_in">super</span>(in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> ObjectStreamClass <span class="title function_">readClassDescriptor</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"><span class="type">ObjectStreamClass</span> <span class="variable">resultClassDescriptor</span> <span class="operator">=</span> <span class="built_in">super</span>.readClassDescriptor(); <span class="comment">// initially streams descriptor</span></span><br><span class="line">Class localClass; <span class="comment">// the class in the local JVM that this descriptor represents.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">localClass = Class.forName(resultClassDescriptor.getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="keyword">return</span> resultClassDescriptor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ObjectStreamClass</span> <span class="variable">localClassDescriptor</span> <span class="operator">=</span> ObjectStreamClass.lookup(localClass);</span><br><span class="line"><span class="keyword">if</span> (localClassDescriptor != <span class="literal">null</span>) &#123; <span class="comment">// only if class implements serializable</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">localSUID</span> <span class="operator">=</span> localClassDescriptor.getSerialVersionUID();</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">streamSUID</span> <span class="operator">=</span> resultClassDescriptor.getSerialVersionUID();</span><br><span class="line"><span class="keyword">if</span> (streamSUID != localSUID) &#123; <span class="comment">// check for serialVersionUID mismatch.</span></span><br><span class="line">log.warn(<span class="string">&quot;Overriding serialized class version mismatch: local serialVersionUID = [&#123;&#125;] stream serialVersionUID = [&#123;&#125;]&quot;</span>, localSUID, streamSUID);</span><br><span class="line">resultClassDescriptor = localClassDescriptor; <span class="comment">// Use local class descriptor for deserialization</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resultClassDescriptor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud nacos的服务下线后，没有从负载均衡中剔除</title>
    <link href="/2025/04/28/Spring-Cloud-nacos%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%BA%BF%E5%90%8E%EF%BC%8C%E6%B2%A1%E6%9C%89%E4%BB%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B8%AD%E5%89%94%E9%99%A4/"/>
    <url>/2025/04/28/Spring-Cloud-nacos%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%BA%BF%E5%90%8E%EF%BC%8C%E6%B2%A1%E6%9C%89%E4%BB%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B8%AD%E5%89%94%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<p>通过debug发现，Spring Cloud的负载均衡对服务进行了缓存，导致nacos的服务从nacos中下线，没有及时剔除</p><p>org.springframework.cloud.loadbalancer.core.CachingServiceInstanceListSupplier</p><p>解决方法</p><p>关闭该缓存，nacos自身是有缓存的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># 禁用loadbalancer缓存,实现优雅下线</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">cache:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Futuer控制任务执行时间</title>
    <link href="/2025/02/20/%E4%BD%BF%E7%94%A8Futuer%E6%8E%A7%E5%88%B6%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
    <url>/2025/02/20/%E4%BD%BF%E7%94%A8Futuer%E6%8E%A7%E5%88%B6%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        Future&lt;Boolean&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MINUTES.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Interrupted&quot;</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> future.get(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;timeout&quot;</span>);</span><br><span class="line">            future.cancel(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TimeUnit.HOURS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.util.concurrent.TimeoutException</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:204)</span><br><span class="line">at io.github.hsn.bugtest.ThreadTest.main(ThreadTest.java:23)</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">at java.base/java.lang.Thread.sleep(Native Method)</span><br><span class="line">at java.base/java.lang.Thread.sleep(Thread.java:344)</span><br><span class="line">at java.base/java.util.concurrent.TimeUnit.sleep(TimeUnit.java:446)</span><br><span class="line">at io.github.hsn.bugtest.ThreadTest.lambda$main$0(ThreadTest.java:14)</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)</span><br><span class="line">at java.base/java.lang.Thread.run(Thread.java:840)</span><br><span class="line">timeout</span><br><span class="line">Interrupted</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>k8s批量调整副本数量</title>
    <link href="/2024/08/22/k8s%E6%89%B9%E9%87%8F%E8%B0%83%E6%95%B4%E5%89%AF%E6%9C%AC%E6%95%B0%E9%87%8F/"/>
    <url>/2024/08/22/k8s%E6%89%B9%E9%87%8F%E8%B0%83%E6%95%B4%E5%89%AF%E6%9C%AC%E6%95%B0%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>deploy</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> deploy -n default|tail -q -n 100|awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>|xargs -I ARG kubectl scale deploy ARG -n<span class="hljs-built_in"> default </span><span class="hljs-attribute">--replicas</span>=0<br><br></code></pre></td></tr></table></figure><p>statefulset</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> statefulset -n default|tail -q -n 100|awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>|xargs -I ARG kubectl scale statefulset ARG -n<span class="hljs-built_in"> default </span><span class="hljs-attribute">--replicas</span>=0<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ops</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jira修改RoadMap里的时间格式，硬核日期格式化</title>
    <link href="/2024/07/04/jira%E4%BF%AE%E6%94%B9RoadMap%E9%87%8C%E7%9A%84%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%EF%BC%8C%E7%A1%AC%E6%A0%B8%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <url>/2024/07/04/jira%E4%BF%AE%E6%94%B9RoadMap%E9%87%8C%E7%9A%84%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%EF%BC%8C%E7%A1%AC%E6%A0%B8%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="jira修改roadMap里的时间格式"><a href="#jira修改roadMap里的时间格式" class="headerlink" title="jira修改roadMap里的时间格式"></a>jira修改roadMap里的时间格式</h2><p>在插件目录找到portfolio-plugin-9.16.1.jar将他下载到本地</p><p>使用zip解压软件解压jar包</p><p>全局搜索 DD&#x2F;MM&#x2F;YY 将其替换YYYY&#x2F;MM&#x2F;DD</p><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20240704021643685-138945748_1730686593219.png"></p><p>修改后效果图</p><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20240704021902180-1363806614_1730686593219.png"><br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20240704021925960-489974832_1730686593219.png"></p><p>全局搜索</p><p>return<code>$&#123;l()(o.getUTCDate().toString(),2,&quot;0&quot;)&#125;/$&#123;t&#125;</code></p><p>替换</p><p>return <code>$&#123;o.getUTCMonth()+1&#125;/$&#123;l()(o.getUTCDate().toString(), 2, &quot;0&quot;)&#125;</code></p><p>效果图</p><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20240704022125055-91458395_1730686593219.png"></p><p>全局搜索</p><p>return<code>$&#123;t&#125; $&#123;l()(&quot;&quot;+o.getUTCDate(),2,&quot;0&quot;)&#125;/$&#123;a&#125;</code></p><p>替换</p><p>return <code>$&#123;o.getUTCMonth()&#125;/$&#123;l()(&quot;&quot; + o.getUTCDate(), 2, &quot;0&quot;)&#125; 星期$&#123;[&#39;日&#39;,&#39;一&#39;,&#39;二&#39;,&#39;三&#39;,&#39;四&#39;,&#39;五&#39;,&#39;六&#39;][o.getUTCDay()]&#125;</code></p><p>效果<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20240704024640829-57160194_1730686593219.png"></p><p>全部替换完成后，将文件压缩成zip包，将后缀修改成jar，并上传到插件目录下替换</p><p>这里是已经替换好的文件包</p>]]></content>
    
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>批量修改字段字符集和表表字符集，sql生成</title>
    <link href="/2024/04/11/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%AD%97%E6%AE%B5%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E8%A1%A8%E8%A1%A8%E5%AD%97%E7%AC%A6%E9%9B%86%EF%BC%8Csql%E7%94%9F%E6%88%90/"/>
    <url>/2024/04/11/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%AD%97%E6%AE%B5%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E8%A1%A8%E8%A1%A8%E5%AD%97%E7%AC%A6%E9%9B%86%EF%BC%8Csql%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>表字符集修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    CONCAT(</span><br><span class="line">        <span class="string">&#x27;ALTER TABLE &#x27;</span>,</span><br><span class="line">        TABLE_NAME,</span><br><span class="line">        <span class="string">&#x27; CONVERT TO CHARACTER SET utf8mb4;&#x27;</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema. TABLES</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;dataBaseName&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>表字段字符集修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    CONCAT(</span><br><span class="line">        <span class="string">&#x27;ALTER TABLE `&#x27;</span>,</span><br><span class="line">        TABLE_NAME,</span><br><span class="line">        <span class="string">&#x27;` MODIFY `&#x27;</span>,</span><br><span class="line">        COLUMN_NAME,</span><br><span class="line">        <span class="string">&#x27;` &#x27;</span>,</span><br><span class="line">        DATA_TYPE,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">        CHARACTER_MAXIMUM_LENGTH,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27; CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci&#x27;</span>,</span><br><span class="line">         if(COLUMN_DEFAULT <span class="keyword">is</span> <span class="keyword">null</span> ,<span class="string">&#x27;&#x27;</span>,concat(<span class="string">&#x27; default \&#x27;&#x27;,COLUMN_DEFAULT,&#x27;</span>\<span class="string">&#x27;&#x27;</span>)),</span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">CASE</span></span><br><span class="line">            <span class="keyword">WHEN</span> IS_NULLABLE <span class="operator">=</span> <span class="string">&#x27;NO&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">                <span class="string">&#x27; NOT NULL&#x27;</span></span><br><span class="line">            <span class="keyword">ELSE</span></span><br><span class="line">                <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">END</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;table_name&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> (DATA_TYPE <span class="operator">=</span> <span class="string">&#x27;varchar&#x27;</span> <span class="keyword">OR</span> DATA_TYPE <span class="operator">=</span> <span class="string">&#x27;char&#x27;</span>)</span><br><span class="line"><span class="keyword">and</span> TABLE_NAME <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;flyway_schema_history&#x27;</span>,<span class="string">&#x27;undo_log&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用RSS+n8n同步博客园文章到cubox</title>
    <link href="/2024/02/07/%E4%BD%BF%E7%94%A8RSS+n8n%E5%90%8C%E6%AD%A5%E5%8D%9A%E5%AE%A2%E5%9B%AD%E6%96%87%E7%AB%A0%E5%88%B0cubox/"/>
    <url>/2024/02/07/%E4%BD%BF%E7%94%A8RSS+n8n%E5%90%8C%E6%AD%A5%E5%8D%9A%E5%AE%A2%E5%9B%AD%E6%96%87%E7%AB%A0%E5%88%B0cubox/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="使用RSS-n8n同步博客文章到Cubox"><a href="#使用RSS-n8n同步博客文章到Cubox" class="headerlink" title="使用RSS+n8n同步博客文章到Cubox"></a>使用RSS+n8n同步博客文章到Cubox</h1><h2 id="Cubox"><a href="#Cubox" class="headerlink" title="Cubox"></a>Cubox</h2><p>Cubox是一款碎片知识文章收集的应用</p><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20240207223738974-1361379525_1730686602019.png"></p><h2 id="n8n"><a href="#n8n" class="headerlink" title="n8n"></a>n8n</h2><p>低代码的workFlow</p><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20240207223759173-1889192280_1730686602019.png"></p><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20240207224237831-1340391436_1730686602019.png"></p><p>大致流程</p><p>定时触发器-&gt;获取RSS列表-&gt;迭代-&gt;文章是否已经同步-&gt;同步文章到cubox-&gt;同步记录写到数据库-&gt;结束</p><blockquote><p>这是一个大概的流程，当然也可以实现同步到其他地方的流程</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用spring cloud gateway 转发文件上传请求时，直接内存oom异常</title>
    <link href="/2024/01/03/%E4%BD%BF%E7%94%A8spring%20cloud%20gateway%20%E8%BD%AC%E5%8F%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%AF%B7%E6%B1%82%E6%97%B6%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98oom%E5%BC%82%E5%B8%B8/"/>
    <url>/2024/01/03/%E4%BD%BF%E7%94%A8spring%20cloud%20gateway%20%E8%BD%AC%E5%8F%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%AF%B7%E6%B1%82%E6%97%B6%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98oom%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>重写 AdaptCachedBodyGlobalFilter</p><p>直接在项目中建立一个包名和文件名一样的类,实现覆盖的效果，目前官方的类还不支持拓展<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20240103234938964-1542120015_1730686602019.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Copyright 2013-2020 the original author or authors.</span><br><span class="line"> *</span><br><span class="line"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"> * you may not use this file except in compliance with the License.</span><br><span class="line"> * You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> *      https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License for the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">package org.springframework.cloud.gateway.filter;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ConcurrentHashMap;</span><br><span class="line">import java.util.concurrent.ConcurrentMap;</span><br><span class="line"></span><br><span class="line">import org.springframework.http.HttpHeaders;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.gateway.event.EnableBodyCachingEvent;</span><br><span class="line">import org.springframework.cloud.gateway.route.Route;</span><br><span class="line">import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;</span><br><span class="line">import org.springframework.context.ApplicationListener;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line"></span><br><span class="line">import static org.springframework.cloud.gateway.support.ServerWebExchangeUtils.CACHED_REQUEST_BODY_ATTR;</span><br><span class="line">import static org.springframework.cloud.gateway.support.ServerWebExchangeUtils.CACHED_SERVER_HTTP_REQUEST_DECORATOR_ATTR;</span><br><span class="line">import static org.springframework.cloud.gateway.support.ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR;</span><br><span class="line"></span><br><span class="line">public class AdaptCachedBodyGlobalFilter implements GlobalFilter, Ordered, ApplicationListener&lt;EnableBodyCachingEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">private ConcurrentMap&lt;String, Boolean&gt; routesToCache = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onApplicationEvent(EnableBodyCachingEvent event) &#123;</span><br><span class="line">this.routesToCache.putIfAbsent(event.getRouteId(), true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">//此处为重写代码-start</span><br><span class="line">String contentType = exchange.getRequest().getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);</span><br><span class="line"></span><br><span class="line">if (contentType != null &amp;&amp; contentType.contains(MediaType.MULTIPART_FORM_DATA_VALUE)) &#123;</span><br><span class="line">return chain.filter(exchange);</span><br><span class="line">&#125;</span><br><span class="line">//此处为重写代码-end</span><br><span class="line">// the cached ServerHttpRequest is used when the ServerWebExchange can not be</span><br><span class="line">// mutated, for example, during a predicate where the body is read, but still</span><br><span class="line">// needs to be cached.</span><br><span class="line">ServerHttpRequest cachedRequest = exchange.getAttributeOrDefault(CACHED_SERVER_HTTP_REQUEST_DECORATOR_ATTR,</span><br><span class="line">null);</span><br><span class="line">if (cachedRequest != null) &#123;</span><br><span class="line">exchange.getAttributes().remove(CACHED_SERVER_HTTP_REQUEST_DECORATOR_ATTR);</span><br><span class="line">return chain.filter(exchange.mutate().request(cachedRequest).build());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">DataBuffer body = exchange.getAttributeOrDefault(CACHED_REQUEST_BODY_ATTR, null);</span><br><span class="line">Route route = exchange.getAttribute(GATEWAY_ROUTE_ATTR);</span><br><span class="line"></span><br><span class="line">if (body != null || !this.routesToCache.containsKey(route.getId())) &#123;</span><br><span class="line">return chain.filter(exchange);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return ServerWebExchangeUtils.cacheRequestBody(exchange, (serverHttpRequest) -&gt; &#123;</span><br><span class="line">// don&#x27;t mutate and build if same request object</span><br><span class="line">if (serverHttpRequest == exchange.getRequest()) &#123;</span><br><span class="line">return chain.filter(exchange);</span><br><span class="line">&#125;</span><br><span class="line">return chain.filter(exchange.mutate().request(serverHttpRequest).build());</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int getOrder() &#123;</span><br><span class="line">return Ordered.HIGHEST_PRECEDENCE + 1000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring boot 开启gzip 加快报文传输速度</title>
    <link href="/2023/12/30/spring%20boot%20%E5%BC%80%E5%90%AFgzip%20%E5%8A%A0%E5%BF%AB%E6%8A%A5%E6%96%87%E4%BC%A0%E8%BE%93%E9%80%9F%E5%BA%A6/"/>
    <url>/2023/12/30/spring%20boot%20%E5%BC%80%E5%90%AFgzip%20%E5%8A%A0%E5%BF%AB%E6%8A%A5%E6%96%87%E4%BC%A0%E8%BE%93%E9%80%9F%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>对于一些带宽比较小的服务器，报文内容比较多的应用，这个操作带来的响应是巨大的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置gzip</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">mime-types:</span> <span class="string">application/json</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring gateway 超时重试和默认拦截器配置</title>
    <link href="/2023/12/20/spring%20gateway%20%E8%B6%85%E6%97%B6%E9%87%8D%E8%AF%95%E5%92%8C%E9%BB%98%E8%AE%A4%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/12/20/spring%20gateway%20%E8%B6%85%E6%97%B6%E9%87%8D%E8%AF%95%E5%92%8C%E9%BB%98%E8%AE%A4%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Retry</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>RetryConfig 中默认的异常处理为IOException.class, TimeoutException.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RetryConfig</span> <span class="keyword">implements</span> <span class="title class_">HasRouteId</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String routeId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">retries</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Series&gt; series = toList(Series.SERVER_ERROR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;HttpStatus&gt; statuses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;HttpMethod&gt; methods = toList(HttpMethod.GET);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;&gt; exceptions = toList(IOException.class, TimeoutException.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BackoffConfig backoff;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RetryConfig <span class="title function_">allMethods</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> setMethods(HttpMethod.values());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">()</span> &#123;</span><br><span class="line">Assert.isTrue(<span class="built_in">this</span>.retries &gt; <span class="number">0</span>, <span class="string">&quot;retries must be greater than 0&quot;</span>);</span><br><span class="line">Assert.isTrue(!<span class="built_in">this</span>.series.isEmpty() || !<span class="built_in">this</span>.statuses.isEmpty() || !<span class="built_in">this</span>.exceptions.isEmpty(),</span><br><span class="line"><span class="string">&quot;series, status and exceptions may not all be empty&quot;</span>);</span><br><span class="line">Assert.notEmpty(<span class="built_in">this</span>.methods, <span class="string">&quot;methods may not be empty&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.backoff != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.backoff.validate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BackoffConfig <span class="title function_">getBackoff</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> backoff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RetryConfig <span class="title function_">setBackoff</span><span class="params">(BackoffConfig backoff)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.backoff = backoff;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RetryConfig <span class="title function_">setBackoff</span><span class="params">(Duration firstBackoff, Duration maxBackoff, <span class="type">int</span> factor,</span></span><br><span class="line"><span class="params"><span class="type">boolean</span> basedOnPreviousValue)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.backoff = <span class="keyword">new</span> <span class="title class_">BackoffConfig</span>(firstBackoff, maxBackoff, factor, basedOnPreviousValue);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRouteId</span><span class="params">(String routeId)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.routeId = routeId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRouteId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.routeId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRetries</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> retries;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RetryConfig <span class="title function_">setRetries</span><span class="params">(<span class="type">int</span> retries)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.retries = retries;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Series&gt; <span class="title function_">getSeries</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> series;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RetryConfig <span class="title function_">setSeries</span><span class="params">(Series... series)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.series = Arrays.asList(series);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;HttpStatus&gt; <span class="title function_">getStatuses</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> statuses;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RetryConfig <span class="title function_">setStatuses</span><span class="params">(HttpStatus... statuses)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.statuses = Arrays.asList(statuses);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;HttpMethod&gt; <span class="title function_">getMethods</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> methods;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RetryConfig <span class="title function_">setMethods</span><span class="params">(HttpMethod... methods)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.methods = Arrays.asList(methods);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;&gt; getExceptions() &#123;</span><br><span class="line"><span class="keyword">return</span> exceptions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RetryConfig <span class="title function_">setExceptions</span><span class="params">(Class&lt;? extends Throwable&gt;... exceptions)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.exceptions = Arrays.asList(exceptions);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring boot 配置get方法枚举转换策略</title>
    <link href="/2023/12/19/spring%20boot%20%E9%85%8D%E7%BD%AEget%E6%96%B9%E6%B3%95%E6%9E%9A%E4%B8%BE%E8%BD%AC%E6%8D%A2%E7%AD%96%E7%95%A5/"/>
    <url>/2023/12/19/spring%20boot%20%E9%85%8D%E7%BD%AEget%E6%96%B9%E6%B3%95%E6%9E%9A%E4%B8%BE%E8%BD%AC%E6%8D%A2%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>配置转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeEnumConverterFactory</span> <span class="keyword">implements</span> <span class="title class_">ConverterFactory</span>&lt;String, Enum&lt;?&gt;&gt; &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;?&gt;&gt; Converter&lt;String, T&gt; <span class="title function_">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringToEnum</span>&lt;&gt;(targetType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(WebMvcConfigurer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZbMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">registry.addConverterFactory(<span class="keyword">new</span> <span class="title class_">CompositeEnumConverterFactory</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spel表达demo</title>
    <link href="/2023/03/08/Spel%E8%A1%A8%E8%BE%BEdemo/"/>
    <url>/2023/03/08/Spel%E8%A1%A8%E8%BE%BEdemo/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.expression.MapAccessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.common.TemplateParserContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.support.StandardEvaluationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">TemplateParserContext</span> <span class="variable">templateParserContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplateParserContext</span>(<span class="string">&quot;$&#123;&quot;</span>,<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>();</span><br><span class="line">context.addPropertyAccessor(<span class="keyword">new</span> <span class="title class_">MapAccessor</span>());</span><br><span class="line">context.setRootObject(Map.of(</span><br><span class="line"><span class="string">&quot;map&quot;</span>, Collections.singletonMap(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>),</span><br><span class="line"><span class="string">&quot;test&quot;</span>,<span class="string">&quot;this is a test&quot;</span></span><br><span class="line">));</span><br><span class="line"><span class="type">SpelExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;map.a : $&#123;map.a&#125;&quot;</span>,templateParserContext);</span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> expression.getValue(context);</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>();</span><br><span class="line">context.setVariable(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;this is a test&quot;</span>);</span><br><span class="line"><span class="type">SpelExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line">System.out.println(parser.parseExpression(<span class="string">&quot;#test&quot;</span>).getValue(context));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins  mavend mvn too many open files</title>
    <link href="/2023/03/01/jenkins%20%20mavend%20mvn%20too%20many%20open%20files/"/>
    <url>/2023/03/01/jenkins%20%20mavend%20mvn%20too%20many%20open%20files/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>先配置mvnd的配置文件 conf&#x2F;mvnd.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvnd.jvmArgs=-XX:-MaxFDLimit</span><br></pre></td></tr></table></figure><p>jenkins 启动命令添加-XX:-MaxFDLimit</p><p>修改系统ulimt的open files 大小</p>]]></content>
    
    
    
    <tags>
      
      <tag>ops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Seata Xa事务超时问题排查和解决</title>
    <link href="/2023/02/25/Seata%20Xa%E4%BA%8B%E5%8A%A1%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%92%8C%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/02/25/Seata%20Xa%E4%BA%8B%E5%8A%A1%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%92%8C%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>现有服务列表<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20230225185321386-1855228608_1730686602019.png"></p><p>在使用seata时总会超时</p><p>通过skyWalking追踪发现<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20230225185427826-1128974312_1730686613411.png"></p><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20230225185454578-207629072_1730686613411.png"></p><p>在调用接口camunda&#x2F;group&#x2F;list时获取getConnection超时，<br>在全局事务回滚后，sql又能正常执行</p><p>问题原因和解决：</p><p>因为没有配置数据库连接池数量，全局事务结束前会挂起connection，服务被频繁调用，把连接池占满，后续新来的请求，没有链接可以使用，造成超时</p><p>解决方案：加大连接池数量</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JacksonTypeInfo</title>
    <link href="/2023/01/06/JacksonTypeInfo/"/>
    <url>/2023/01/06/JacksonTypeInfo/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>Jackson解决泛型丢失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JacksonTypeInfo</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次docker默认网段的事故</title>
    <link href="/2023/01/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1docker%E9%BB%98%E8%AE%A4%E7%BD%91%E6%AE%B5%E7%9A%84%E4%BA%8B%E6%95%85/"/>
    <url>/2023/01/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1docker%E9%BB%98%E8%AE%A4%E7%BD%91%E6%AE%B5%E7%9A%84%E4%BA%8B%E6%95%85/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>docker的默认网段使用的是172.17.0.0&#x2F;24和办公网起了冲突，导致办公网无法访问</p><p>修改默认网段</p><p>修改&#x2F;etc&#x2F;docker&#x2F;daemon.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;bip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.210.1/24&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>helm kibana 8.5.1 安装</title>
    <link href="/2022/12/06/helm%20kibana%208.5.1%20%E5%AE%89%E8%A3%85/"/>
    <url>/2022/12/06/helm%20kibana%208.5.1%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>helm应用名使用kibana</p><p>清除命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete configmap kibana-kibana-helm-scripts -n elastic</span><br><span class="line">kubectl delete serviceaccount pre-install-kibana-kibana -n elastic</span><br><span class="line">kubectl delete roles pre-install-kibana-kibana -n elastic</span><br><span class="line">kubectl delete rolebindings pre-install-kibana-kibana -n elastic</span><br><span class="line">kubectl delete job pre-install-kibana-kibana -n elastic</span><br><span class="line"></span><br><span class="line">kubectl delete serviceaccount post-delete-kibana-kibana -n elastic</span><br><span class="line">kubectl delete roles post-delete-kibana-kibana -n elastic</span><br><span class="line">kubectl delete rolebindings post-delete-kibana-kibana -n elastic</span><br><span class="line">kubectl delete job post-delete-kibana-kibana -n elastic</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s-nfs</title>
    <link href="/2022/12/05/k8s-nfs/"/>
    <url>/2022/12/05/k8s-nfs/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>nfs.server nfs服务器</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br>helm repo <span class="hljs-built_in">add</span> <span class="hljs-built_in">nfs</span>-subdir-external-provisioner https:<span class="hljs-comment">//kubernetes-sigs.github.io/nfs-subdir-external-provisioner/</span><br><br>helm install <span class="hljs-built_in">nfs</span>-subdir-external-provisioner <span class="hljs-built_in">nfs</span>-subdir-external-provisioner/<span class="hljs-built_in">nfs</span>-subdir-external-provisioner \<br>    --<span class="hljs-built_in">set</span> <span class="hljs-built_in">nfs</span>.<span class="hljs-property">server</span>=<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.121</span> \<br>    --<span class="hljs-built_in">set</span> <span class="hljs-built_in">nfs</span>.<span class="hljs-property">path</span>=/data \<br>    --<span class="hljs-built_in">set</span> <span class="hljs-built_in">image</span>.<span class="hljs-property">repository</span>=dyrnq/<span class="hljs-built_in">nfs</span>-subdir-external-provisioner<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ops</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redisson的Lock原理和参数</title>
    <link href="/2022/08/09/Redisson%E7%9A%84Lock%E5%8E%9F%E7%90%86%E5%92%8C%E5%8F%82%E6%95%B0/"/>
    <url>/2022/08/09/Redisson%E7%9A%84Lock%E5%8E%9F%E7%90%86%E5%92%8C%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Reidsson的Lock原理和看门狗机制"><a href="#Reidsson的Lock原理和看门狗机制" class="headerlink" title="Reidsson的Lock原理和看门狗机制"></a>Reidsson的Lock原理和看门狗机制</h1><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><h3 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h3><p>调用RedissonClient的getLock方法获取锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns Lock instance by name.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Implements a &lt;b&gt;non-fair&lt;/b&gt; locking so doesn&#x27;t guarantees an acquire order by threads.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * To increase reliability during failover, all operations wait for propagation to all Redis slaves.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name - name of object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Lock object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">RLock <span class="title function_">getLock</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure><p>getLock方法的实现,会返回一个RedissonLock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RLock <span class="title function_">getLock</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedissonLock</span>(commandExecutor, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReidssonLock和RLock"><a href="#ReidssonLock和RLock" class="headerlink" title="ReidssonLock和RLock"></a>ReidssonLock和RLock</h3><p>ReidssonLock实现了RLock接口<br>RLock.lock(); 是阻塞式等待的，默认加锁时间是30s；如果业务超长，运行期间会自动续期到30s。不用担心业务时间长，锁自动过期被删掉；加锁的业务只要运行完成，就不会给当前锁续期，即使不手动解锁，锁默认会在30s内自动过期，不会产生死锁问题；</p><p>也可以自己指定解锁时间RLock.lock(10,TimeUnit.SECONDS)，10秒钟自动解锁，自己指定解锁时间redis不会自动续期；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">public interface RLock extends Lock, RLockAsync &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns name of object</span><br><span class="line">     *</span><br><span class="line">     * @return name - name of object</span><br><span class="line">     */</span><br><span class="line">    String getName();</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * Acquires the lock with defined &lt;code&gt;leaseTime&lt;/code&gt;.</span><br><span class="line">     * Waits if necessary until lock became available.</span><br><span class="line">     *</span><br><span class="line">     * Lock will be released automatically after defined &lt;code&gt;leaseTime&lt;/code&gt; interval.</span><br><span class="line">     *</span><br><span class="line">     * @param leaseTime the maximum time to hold the lock after it&#x27;s acquisition,</span><br><span class="line">     *        if it hasn&#x27;t already been released by invoking &lt;code&gt;unlock&lt;/code&gt;.</span><br><span class="line">     *        If leaseTime is -1, hold the lock until explicitly unlocked.</span><br><span class="line">     * @param unit the time unit</span><br><span class="line">     * @throws InterruptedException - if the thread is interrupted</span><br><span class="line">     */</span><br><span class="line">    void lockInterruptibly(long leaseTime, TimeUnit unit) throws InterruptedException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Tries to acquire the lock with defined &lt;code&gt;leaseTime&lt;/code&gt;.</span><br><span class="line">     * Waits up to defined &lt;code&gt;waitTime&lt;/code&gt; if necessary until the lock became available.</span><br><span class="line">     *</span><br><span class="line">     * Lock will be released automatically after defined &lt;code&gt;leaseTime&lt;/code&gt; interval.</span><br><span class="line">     *</span><br><span class="line">     * @param waitTime the maximum time to acquire the lock</span><br><span class="line">     * @param leaseTime lease time</span><br><span class="line">     * @param unit time unit</span><br><span class="line">     * @return &lt;code&gt;true&lt;/code&gt; if lock is successfully acquired,</span><br><span class="line">     *          otherwise &lt;code&gt;false&lt;/code&gt; if lock is already set.</span><br><span class="line">     * @throws InterruptedException - if the thread is interrupted</span><br><span class="line">     */</span><br><span class="line">    boolean tryLock(long waitTime, long leaseTime, TimeUnit unit) throws InterruptedException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Acquires the lock with defined &lt;code&gt;leaseTime&lt;/code&gt;.</span><br><span class="line">     * Waits if necessary until lock became available.</span><br><span class="line">     *</span><br><span class="line">     * Lock will be released automatically after defined &lt;code&gt;leaseTime&lt;/code&gt; interval.</span><br><span class="line">     *</span><br><span class="line">     * @param leaseTime the maximum time to hold the lock after it&#x27;s acquisition,</span><br><span class="line">     *        if it hasn&#x27;t already been released by invoking &lt;code&gt;unlock&lt;/code&gt;.</span><br><span class="line">     *        If leaseTime is -1, hold the lock until explicitly unlocked.</span><br><span class="line">     * @param unit the time unit</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    void lock(long leaseTime, TimeUnit unit);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Unlocks the lock independently of its state</span><br><span class="line">     *</span><br><span class="line">     * @return &lt;code&gt;true&lt;/code&gt; if lock existed and now unlocked</span><br><span class="line">     *          otherwise &lt;code&gt;false&lt;/code&gt;</span><br><span class="line">     */</span><br><span class="line">    boolean forceUnlock();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Checks if the lock locked by any thread</span><br><span class="line">     *</span><br><span class="line">     * @return &lt;code&gt;true&lt;/code&gt; if locked otherwise &lt;code&gt;false&lt;/code&gt;</span><br><span class="line">     */</span><br><span class="line">    boolean isLocked();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Checks if the lock is held by thread with defined &lt;code&gt;threadId&lt;/code&gt;</span><br><span class="line">     *</span><br><span class="line">     * @param threadId Thread ID of locking thread</span><br><span class="line">     * @return &lt;code&gt;true&lt;/code&gt; if held by thread with given id</span><br><span class="line">     *          otherwise &lt;code&gt;false&lt;/code&gt;</span><br><span class="line">     */</span><br><span class="line">    boolean isHeldByThread(long threadId);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Checks if this lock is held by the current thread</span><br><span class="line">     *</span><br><span class="line">     * @return &lt;code&gt;true&lt;/code&gt; if held by current thread</span><br><span class="line">     * otherwise &lt;code&gt;false&lt;/code&gt;</span><br><span class="line">     */</span><br><span class="line">    boolean isHeldByCurrentThread();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Number of holds on this lock by the current thread</span><br><span class="line">     *</span><br><span class="line">     * @return holds or &lt;code&gt;0&lt;/code&gt; if this lock is not held by current thread</span><br><span class="line">     */</span><br><span class="line">    int getHoldCount();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Remaining time to live of the lock</span><br><span class="line">     *</span><br><span class="line">     * @return time in milliseconds</span><br><span class="line">     *          -2 if the lock does not exist.</span><br><span class="line">     *          -1 if the lock exists but has no associated expire.</span><br><span class="line">     */</span><br><span class="line">    long remainTimeToLive();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行加锁操作</p><ol><li><pre><code>获取线程id</code></pre></li><li><pre><code>尝试获取锁</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">boolean</span> interruptibly)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//先尝试一下获取锁</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> tryAcquire(-<span class="number">1</span>, leaseTime, unit, threadId);</span><br><span class="line">        <span class="comment">// lock acquired</span></span><br><span class="line">        <span class="comment">//获取到锁直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;RedissonLockEntry&gt; future = subscribe(threadId);</span><br><span class="line">        <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">            commandExecutor.syncSubscriptionInterrupted(future);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            commandExecutor.syncSubscription(future);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                ttl = tryAcquire(-<span class="number">1</span>, leaseTime, unit, threadId);</span><br><span class="line">                <span class="comment">// lock acquired</span></span><br><span class="line">                <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// waiting for message</span></span><br><span class="line">                <span class="keyword">if</span> (ttl &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        commandExecutor.getNow(future).getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        commandExecutor.getNow(future).getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">                        commandExecutor.getNow(future).getLatch().acquire();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        commandExecutor.getNow(future).getLatch().acquireUninterruptibly();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            unsubscribe(commandExecutor.getNow(future), threadId);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        get(lockAsync(leaseTime, unit));</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>尝试获取锁的代码<br>如果没有指定锁的持有时间，则默认使用**internalLockLeaseTime(30s)**作为锁的持有时间，该参数在RedissonLock初始化的时候从Reidsson的配置文件中获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="title function_">tryAcquireAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture;</span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        ttlRemainingFuture = tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ttlRemainingFuture = tryLockInnerAsync(waitTime, internalLockLeaseTime,</span><br><span class="line">                TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125;</span><br><span class="line">    CompletionStage&lt;Long&gt; f = ttlRemainingFuture.thenApply(ttlRemaining -&gt; &#123;</span><br><span class="line">        <span class="comment">// lock acquired</span></span><br><span class="line">        <span class="comment">// ttlRemaining代表获取到了锁，从下面的方法可以看出</span></span><br><span class="line">        <span class="keyword">if</span> (ttlRemaining == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">                internalLockLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//没有指定释放时间，会进行锁续约</span></span><br><span class="line">                scheduleExpirationRenewal(threadId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ttlRemaining;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CompletableFutureWrapper</span>&lt;&gt;(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加锁方法，这里的加锁和setnx不一样<br>使用的lua脚本，一样有原子性<br>KEY[1]: 锁的key名称<br>ARGV[2]: 为线程id<br>ARGV[1]: 为设置的过期时间</p><ol><li><pre><code>判断key是否存在  </code></pre>1.1 当key不存在时，调用hincrby,创建一个hash结构，并对该hash结构的以线程id为key的值进行自增1<br>1.2 设置该key的过期时间，pexpire（pexpire是毫秒级的过期时间，expire是秒级的过期时间）</li><li><pre><code>如果key值存在  </code></pre>2.1 查找该hash结构对应的线程id是否存在，如果存在则进行自增<br>2.2 并重新设置过期时间</li><li><pre><code>如果key值存在，但对应的线程id不存在，则返回该key的过期时间，代表改锁已被其他线程占有</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; RFuture&lt;T&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">                <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="看门狗机制"><a href="#看门狗机制" class="headerlink" title="看门狗机制"></a>看门狗机制</h3><p>触发条件，在调用RLock.lock时会触发，如果指定了锁的释放时间，则不会自动需要</p><p>续约方法的入口<br>会判断当前要续约的对象是否已经存在，如果已经存在，则把当前id加入；如果不存在创建一个新的，并调用新的续约操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void scheduleExpirationRenewal(long threadId) &#123;</span><br><span class="line">        ExpirationEntry entry = new ExpirationEntry();</span><br><span class="line">        ExpirationEntry oldEntry = EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);//EXPIRATION_RENEWAL_MAP是属于类`RedissonBaseLock`的变量</span><br><span class="line">        if (oldEntry != null) &#123;</span><br><span class="line">            oldEntry.addThreadId(threadId);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            entry.addThreadId(threadId);</span><br><span class="line">            try &#123;</span><br><span class="line">                //新的续约操作</span><br><span class="line">                renewExpiration();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                if (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                    cancelExpirationRenewal(threadId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>EXPIRATION_RENEWAL_MAP是属于类的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final ConcurrentMap&lt;String, ExpirationEntry&gt; EXPIRATION_RENEWAL_MAP = new ConcurrentHashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="renewExpiration"><a href="#renewExpiration" class="headerlink" title="renewExpiration"></a>renewExpiration</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">private void renewExpiration() &#123;</span><br><span class="line">        ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">        if (ee == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //添加延时任务，这里的定时任务使用的是hash轮</span><br><span class="line">        Timeout task = commandExecutor.getConnectionManager().newTimeout(new TimerTask() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run(Timeout timeout) throws Exception &#123;</span><br><span class="line">                ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">                //进行一些参数校验</span><br><span class="line">                if (ent == null) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                //进行一些参数校验</span><br><span class="line">                Long threadId = ent.getFirstThreadId();</span><br><span class="line">                if (threadId == null) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                //进行续约操作，判断当前锁和对应的线程是否存在，如果存在则执行续约操作</span><br><span class="line">                RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">                //成功后的回调</span><br><span class="line">                future.whenComplete((res, e) -&gt; &#123;</span><br><span class="line">                    if (e != null) &#123;</span><br><span class="line">                        log.error(&quot;Can&#x27;t update lock &quot; + getRawName() + &quot; expiration&quot;, e);</span><br><span class="line">                        //如果报错了则从续约操作中移除</span><br><span class="line">                        EXPIRATION_RENEWAL_MAP.remove(getEntryName());</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    if (res) &#123;</span><br><span class="line">                        // reschedule itself</span><br><span class="line">                        //继续调用，添加延时任务</span><br><span class="line">                        renewExpiration();</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //从延时任务中移除</span><br><span class="line">                        cancelExpirationRenewal(null);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        //续约间隔，为1/3</span><br><span class="line">        &#125;, internalLockLeaseTime / 3, TimeUnit.MILLISECONDS);</span><br><span class="line">        </span><br><span class="line">        ee.setTimeout(task);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="UnLock释放锁操作"><a href="#UnLock释放锁操作" class="headerlink" title="UnLock释放锁操作"></a>UnLock释放锁操作</h3><p>释放锁的实际调用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public RFuture&lt;Void&gt; unlockAsync(long threadId) &#123;</span><br><span class="line">    RFuture&lt;Boolean&gt; future = unlockInnerAsync(threadId);</span><br><span class="line"></span><br><span class="line">    CompletionStage&lt;Void&gt; f = future.handle((opStatus, e) -&gt; &#123;</span><br><span class="line">        //取消续约，将该线程id从map中移除，如果map中的锁也为空了，则将锁记录也移除</span><br><span class="line">        cancelExpirationRenewal(threadId);</span><br><span class="line"></span><br><span class="line">        if (e != null) &#123;</span><br><span class="line">            throw new CompletionException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        if (opStatus == null) &#123;</span><br><span class="line">            IllegalMonitorStateException cause = new IllegalMonitorStateException(&quot;attempt to unlock lock, not locked by current thread by node id: &quot;</span><br><span class="line">                    + id + &quot; thread-id: &quot; + threadId);</span><br><span class="line">            throw new CompletionException(cause);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return new CompletableFutureWrapper&lt;&gt;(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="Reidsson的锁用的是setnx吗"><a href="#Reidsson的锁用的是setnx吗" class="headerlink" title="Reidsson的锁用的是setnx吗"></a>Reidsson的锁用的是setnx吗</h3><p>不是，Reidsson使用的是lua脚本，使用的结构是hash结构，方便其实现一些可重入锁，读写锁的特性</p><h3 id="Redisson的默认锁持有时间是多久"><a href="#Redisson的默认锁持有时间是多久" class="headerlink" title="Redisson的默认锁持有时间是多久"></a>Redisson的默认锁持有时间是多久</h3><p>30s</p><h3 id="Redisson看门狗锁的续约时间是多久"><a href="#Redisson看门狗锁的续约时间是多久" class="headerlink" title="Redisson看门狗锁的续约时间是多久"></a>Redisson看门狗锁的续约时间是多久</h3><p>锁持有时间的三分之一</p><h3 id="Redssion什么时候会进行续约"><a href="#Redssion什么时候会进行续约" class="headerlink" title="Redssion什么时候会进行续约"></a>Redssion什么时候会进行续约</h3><p>在没有指定锁持有时间的时候会自动续约</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7添加ip白名单</title>
    <link href="/2022/06/16/Centos7%E6%B7%BB%E5%8A%A0ip%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    <url>/2022/06/16/Centos7%E6%B7%BB%E5%8A%A0ip%E7%99%BD%E5%90%8D%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-rich-rule=&#x27;rule family=ipv4 source address=10.255.19.3 accept&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写一个通用的TreeUtil，自关联表结构的树形构造</title>
    <link href="/2022/03/18/%E5%86%99%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84TreeUtil%EF%BC%8C%E8%87%AA%E5%85%B3%E8%81%94%E8%A1%A8%E7%BB%93%E6%9E%84%E7%9A%84%E6%A0%91%E5%BD%A2%E6%9E%84%E9%80%A0/"/>
    <url>/2022/03/18/%E5%86%99%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84TreeUtil%EF%BC%8C%E8%87%AA%E5%85%B3%E8%81%94%E8%A1%A8%E7%BB%93%E6%9E%84%E7%9A%84%E6%A0%91%E5%BD%A2%E6%9E%84%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ccsa.common.core.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.experimental.UtilityClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@UtilityClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeUtil</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T, I, V&gt; List&lt;V&gt; <span class="title function_">treeList</span><span class="params">(List&lt;T&gt; originalList, I rootId, Function&lt;T, I&gt; getId, Function&lt;T, I&gt; getPid,</span></span><br><span class="line"><span class="params">                                      Function&lt;V, List&lt;V&gt;&gt; getChildrenList, Function&lt;T, V&gt; handleV)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> treeList(originalList, rootId, getId, getPid, getChildrenList, handleV, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T, I, V&gt; List&lt;V&gt; <span class="title function_">treeList</span><span class="params">(List&lt;T&gt; originalList, I rootId, Function&lt;T, I&gt; getId, Function&lt;T, I&gt; getPid,</span></span><br><span class="line"><span class="params">                                      Function&lt;V, List&lt;V&gt;&gt; getChildrenList, Function&lt;T, V&gt; handleV, <span class="meta">@Nullable</span> OtherHandle&lt;T, I, V&gt; otherHandle)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tree(originalList, rootId, getId, getPid, getChildrenList, handleV, otherHandle).entrySet().stream()</span><br><span class="line">                .filter(i -&gt; rootId.equals(i.getKey())).map(Map.Entry::getValue).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T, I, V&gt; Map&lt;I, V&gt; <span class="title function_">tree</span><span class="params">(List&lt;T&gt; originalList, I rootId, Function&lt;T, I&gt; getId, Function&lt;T, I&gt; getPid,</span></span><br><span class="line"><span class="params">                                    Function&lt;V, List&lt;V&gt;&gt; getChildrenList, Function&lt;T, V&gt; handleV)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tree(originalList, rootId, getId, getPid, getChildrenList, handleV, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * treeUtil</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originalList    原始列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rootId          根结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> getId           获取id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> getPid          获取pid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> getChildrenList 获取子节点的list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handleV         处理Vo,这里要初始化好 childrenList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherHandle     其他处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;             入参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;I&gt;             id类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;             出参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, I, V&gt; Map&lt;I, V&gt; <span class="title function_">tree</span><span class="params">(List&lt;T&gt; originalList, I rootId, Function&lt;T, I&gt; getId, Function&lt;T, I&gt; getPid,</span></span><br><span class="line"><span class="params">                                    Function&lt;V, List&lt;V&gt;&gt; getChildrenList, Function&lt;T, V&gt; handleV,</span></span><br><span class="line"><span class="params">                                    <span class="meta">@Nullable</span> OtherHandle&lt;T, I, V&gt; otherHandle)</span> &#123;</span><br><span class="line">        <span class="comment">//构建map</span></span><br><span class="line">        Map&lt;I, V&gt; resultMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;I, T&gt; map = originalList.stream().collect(Collectors.toMap(getId, Function.identity()));</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (T t : originalList) &#123;</span><br><span class="line">            <span class="type">I</span> <span class="variable">pid</span> <span class="operator">=</span> getPid.apply(t);</span><br><span class="line">            <span class="type">I</span> <span class="variable">id</span> <span class="operator">=</span> getId.apply(t);</span><br><span class="line">            <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> resultMap.get(id);</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="literal">null</span>)&#123;</span><br><span class="line">               v = handleV.apply(t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pid == rootId) &#123;</span><br><span class="line">                <span class="comment">//判断顶层是否存在,不存在则创建，处理没有子项的顶层</span></span><br><span class="line">                <span class="keyword">if</span> (!resultMap.containsKey(id)) &#123;</span><br><span class="line">                    resultMap.put(id, v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取父类,将自己添加到父类</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">parentV</span> <span class="operator">=</span> resultMap.computeIfAbsent(pid, key -&gt; handleV.apply(map.get(key)));</span><br><span class="line">            <span class="comment">//将自己加入结果map</span></span><br><span class="line">            resultMap.putIfAbsent(id, v);</span><br><span class="line">            <span class="comment">//父节点的子节点列表</span></span><br><span class="line">            List&lt;V&gt; parentChildrenList = getChildrenList.apply(parentV);</span><br><span class="line">            parentChildrenList.add(v);</span><br><span class="line">            <span class="keyword">if</span> (otherHandle != <span class="literal">null</span>) &#123;</span><br><span class="line">                otherHandle.accept(v, parentV, t, map, resultMap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OtherHandle</span>&lt;T, I, V&gt; &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 其他处理</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> vo        vo</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> parentVo  父vo</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> t         原始参数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> cacheMap  原始缓存</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> resultMap 结果集缓存</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(V vo, V parentVo, T t, Map&lt;I, T&gt; cacheMap, Map&lt;I, V&gt; resultMap)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缓存和数据库双写一致性</title>
    <link href="/2022/03/14/%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <url>/2022/03/14/%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20220314101045648-2102818775_1730686613411.svg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql全文索引</title>
    <link href="/2022/03/12/mysql%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/03/12/mysql%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h1><h2 id="添加全文索引"><a href="#添加全文索引" class="headerlink" title="添加全文索引"></a>添加全文索引</h2><p>在5.7.6版本,MySQL内置了ngram全文解析器,用来支持亚洲语种的分词.<br>ALTER TABLE [your_table] ADD FULLTEXT INDEX [index_name] ([column_name]) WITH PARSER ngram;</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>全文索引的搜索使用关键词 MATCH和AGAINST<br>SELECT * FROM [your_table] WHERE MATCH ([column_name]) AGAINST ([key_word]);</p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL语句执行顺序</title>
    <link href="/2022/03/10/MySQL%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <url>/2022/03/10/MySQL%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20220310140408984-1543090377_1730686613411.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RestTemplate服务名调用原理</title>
    <link href="/2022/03/09/RestTemplate%E6%9C%8D%E5%8A%A1%E5%90%8D%E8%B0%83%E7%94%A8%E5%8E%9F%E7%90%86/"/>
    <url>/2022/03/09/RestTemplate%E6%9C%8D%E5%8A%A1%E5%90%8D%E8%B0%83%E7%94%A8%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="RestTemplate服务名调用原理"><a href="#RestTemplate服务名调用原理" class="headerlink" title="RestTemplate服务名调用原理"></a>RestTemplate服务名调用原理</h1><h2 id="服务名调用"><a href="#服务名调用" class="headerlink" title="服务名调用"></a>服务名调用</h2><p>假设test-server是微服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    restTemplate.execute(<span class="string">&quot;http://test-server/a&quot;</span>,HttpMethod.GET,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样是可以直接调用的</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>跟踪一下调用流程<br>org.springframework.web.client.RestTemplate#doExecute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">doExecute</span><span class="params">(URI url, <span class="meta">@Nullable</span> HttpMethod method, <span class="meta">@Nullable</span> RequestCallback requestCallback,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> ResponseExtractor&lt;T&gt; responseExtractor)</span> <span class="keyword">throws</span> RestClientException &#123;</span><br><span class="line"></span><br><span class="line">Assert.notNull(url, <span class="string">&quot;URI is required&quot;</span>);</span><br><span class="line">Assert.notNull(method, <span class="string">&quot;HttpMethod is required&quot;</span>);</span><br><span class="line"><span class="type">ClientHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">ClientHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> createRequest(url, method);</span><br><span class="line"><span class="keyword">if</span> (requestCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">requestCallback.doWithRequest(request);</span><br><span class="line">&#125;</span><br><span class="line">     <span class="comment">//从这里继跟踪</span></span><br><span class="line">response = request.execute();</span><br><span class="line">handleResponse(url, method, response);</span><br><span class="line"><span class="keyword">return</span> (responseExtractor != <span class="literal">null</span> ? responseExtractor.extractData(response) : <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> url.toString();</span><br><span class="line"><span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> url.getRawQuery();</span><br><span class="line">resource = (query != <span class="literal">null</span> ? resource.substring(<span class="number">0</span>, resource.indexOf(<span class="string">&#x27;?&#x27;</span>)) : resource);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ResourceAccessException</span>(<span class="string">&quot;I/O error on &quot;</span> + method.name() +</span><br><span class="line"><span class="string">&quot; request for \&quot;&quot;</span> + resource + <span class="string">&quot;\&quot;: &quot;</span> + ex.getMessage(), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟踪request 的抽象类org.springframework.http.client.AbstractClientHttpRequest#execute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ClientHttpResponse <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">assertNotExecuted();</span><br><span class="line">   <span class="comment">//查看该方法</span></span><br><span class="line"><span class="type">ClientHttpResponse</span> <span class="variable">result</span> <span class="operator">=</span> executeInternal(<span class="built_in">this</span>.headers);</span><br><span class="line"><span class="built_in">this</span>.executed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Abstract template method that writes the given headers and content to the HTTP request.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headers the HTTP headers</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the response object for the executed request</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//查看该方法的实现</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> ClientHttpResponse <span class="title function_">executeInternal</span><span class="params">(HttpHeaders headers)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>org.springframework.http.client.InterceptingClientHttpRequest#executeInternal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ClientHttpResponse <span class="title function_">executeInternal</span><span class="params">(HttpHeaders headers, <span class="type">byte</span>[] bufferedOutput)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InterceptingRequestExecution</span> <span class="variable">requestExecution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterceptingRequestExecution</span>();</span><br><span class="line">   <span class="comment">//调用了内部类的方法</span></span><br><span class="line"><span class="keyword">return</span> requestExecution.execute(<span class="built_in">this</span>, bufferedOutput);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">InterceptingRequestExecution</span> <span class="keyword">implements</span> <span class="title class_">ClientHttpRequestExecution</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Iterator&lt;ClientHttpRequestInterceptor&gt; iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InterceptingRequestExecution</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.iterator = interceptors.iterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//到该方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ClientHttpResponse <span class="title function_">execute</span><span class="params">(HttpRequest request, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.iterator.hasNext()) &#123;</span><br><span class="line">       <span class="comment">//然后执行这个，这里的iterator是在spring cloud的时候自动注入的</span></span><br><span class="line"><span class="type">ClientHttpRequestInterceptor</span> <span class="variable">nextInterceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.iterator.next();</span><br><span class="line"><span class="keyword">return</span> nextInterceptor.intercept(request, body, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">HttpMethod</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">Assert.state(method != <span class="literal">null</span>, <span class="string">&quot;No standard HTTP method&quot;</span>);</span><br><span class="line"><span class="type">ClientHttpRequest</span> <span class="variable">delegate</span> <span class="operator">=</span> requestFactory.createRequest(request.getURI(), method);</span><br><span class="line">request.getHeaders().forEach((key, value) -&gt; delegate.getHeaders().addAll(key, value));</span><br><span class="line"><span class="keyword">if</span> (body.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (delegate <span class="keyword">instanceof</span> StreamingHttpOutputMessage) &#123;</span><br><span class="line"><span class="type">StreamingHttpOutputMessage</span> <span class="variable">streamingOutputMessage</span> <span class="operator">=</span> (StreamingHttpOutputMessage) delegate;</span><br><span class="line">streamingOutputMessage.setBody(outputStream -&gt; StreamUtils.copy(body, outputStream));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">StreamUtils.copy(body, delegate.getBody());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> delegate.execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor#intercept</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ClientHttpResponse <span class="title function_">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="type">byte</span>[] body,</span></span><br><span class="line"><span class="params"><span class="keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> request.getURI();</span><br><span class="line"><span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> originalUri.getHost();</span><br><span class="line">Assert.state(serviceName != <span class="literal">null</span>,</span><br><span class="line"><span class="string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);</span><br><span class="line">   <span class="comment">//这里继续执行</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.loadBalancer.execute(serviceName,</span><br><span class="line"><span class="built_in">this</span>.requestFactory.createRequest(request, body, execution));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient#execute(java.lang.String, org.springframework.cloud.client.ServiceInstance, org.springframework.cloud.client.loadbalancer.LoadBalancerRequest)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(String serviceId, ServiceInstance serviceInstance,</span></span><br><span class="line"><span class="params">LoadBalancerRequest&lt;T&gt; request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (serviceInstance <span class="keyword">instanceof</span> RibbonServer) &#123;</span><br><span class="line">server = ((RibbonServer) serviceInstance).getServer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (server == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No instances available for &quot;</span> + serviceId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">RibbonLoadBalancerContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.clientFactory</span><br><span class="line">.getLoadBalancerContext(serviceId);</span><br><span class="line"><span class="type">RibbonStatsRecorder</span> <span class="variable">statsRecorder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RibbonStatsRecorder</span>(context, server);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">//在这里继续跟踪</span></span><br><span class="line"><span class="type">T</span> <span class="variable">returnVal</span> <span class="operator">=</span> request.apply(serviceInstance);</span><br><span class="line">statsRecorder.recordStats(returnVal);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// catch IOException and rethrow so RestTemplate behaves correctly</span></span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">statsRecorder.recordStats(ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">statsRecorder.recordStats(ex);</span><br><span class="line">ReflectionUtils.rethrowRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerInterceptor#intercept</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncLoadBalancerInterceptor</span> <span class="keyword">implements</span> <span class="title class_">AsyncClientHttpRequestInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AsyncLoadBalancerInterceptor</span><span class="params">(LoadBalancerClient loadBalancer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadBalancer = loadBalancer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListenableFuture&lt;ClientHttpResponse&gt; <span class="title function_">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="type">byte</span>[] body, <span class="keyword">final</span> AsyncClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> request.getURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> originalUri.getHost();</span><br><span class="line">        <span class="keyword">return</span> (ListenableFuture)<span class="built_in">this</span>.loadBalancer.execute(serviceName, <span class="keyword">new</span> <span class="title class_">LoadBalancerRequest</span>&lt;ListenableFuture&lt;ClientHttpResponse&gt;&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> ListenableFuture&lt;ClientHttpResponse&gt; <span class="title function_">apply</span><span class="params">(<span class="keyword">final</span> ServiceInstance instance)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">              <span class="comment">//从这里开始准备修改uri了</span></span><br><span class="line">                <span class="type">HttpRequest</span> <span class="variable">serviceRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceRequestWrapper</span>(request, instance, AsyncLoadBalancerInterceptor.<span class="built_in">this</span>.loadBalancer);</span><br><span class="line">                <span class="keyword">return</span> execution.executeAsync(serviceRequest, body);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>org.springframework.cloud.client.loadbalancer.ServiceRequestWrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceRequestWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpRequestWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServiceInstance instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LoadBalancerClient loadBalancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ServiceRequestWrapper</span><span class="params">(HttpRequest request, ServiceInstance instance,</span></span><br><span class="line"><span class="params">LoadBalancerClient loadBalancer)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(request);</span><br><span class="line"><span class="built_in">this</span>.instance = instance;</span><br><span class="line"><span class="built_in">this</span>.loadBalancer = loadBalancer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> URI <span class="title function_">getURI</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//这里从新构造uri</span></span><br><span class="line"><span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="built_in">this</span>.loadBalancer.reconstructURI(<span class="built_in">this</span>.instance, getRequest().getURI());</span><br><span class="line"><span class="keyword">return</span> uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient#reconstructURI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> URI <span class="title function_">reconstructURI</span><span class="params">(ServiceInstance instance, URI original)</span> &#123;</span><br><span class="line">Assert.notNull(instance, <span class="string">&quot;instance can not be null&quot;</span>);</span><br><span class="line">   <span class="comment">//获取服务名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">serviceId</span> <span class="operator">=</span> instance.getServiceId();</span><br><span class="line"><span class="type">RibbonLoadBalancerContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.clientFactory</span><br><span class="line">.getLoadBalancerContext(serviceId);</span><br><span class="line"></span><br><span class="line">URI uri;</span><br><span class="line">Server server;</span><br><span class="line"><span class="keyword">if</span> (instance <span class="keyword">instanceof</span> RibbonServer) &#123;</span><br><span class="line"><span class="type">RibbonServer</span> <span class="variable">ribbonServer</span> <span class="operator">=</span> (RibbonServer) instance;</span><br><span class="line">server = ribbonServer.getServer();</span><br><span class="line">uri = updateToSecureConnectionIfNeeded(original, ribbonServer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">server = <span class="keyword">new</span> <span class="title class_">Server</span>(instance.getScheme(), instance.getHost(),</span><br><span class="line">instance.getPort());</span><br><span class="line"><span class="type">IClientConfig</span> <span class="variable">clientConfig</span> <span class="operator">=</span> clientFactory.getClientConfig(serviceId);</span><br><span class="line"><span class="type">ServerIntrospector</span> <span class="variable">serverIntrospector</span> <span class="operator">=</span> serverIntrospector(serviceId);</span><br><span class="line">uri = updateToSecureConnectionIfNeeded(original, clientConfig,</span><br><span class="line">serverIntrospector, server);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//这里开始拼新的uri</span></span><br><span class="line"><span class="keyword">return</span> context.reconstructURIWithServer(server, uri);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>com.netflix.loadbalancer.LoadBalancerContext#reconstructURIWithServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> URI <span class="title function_">reconstructURIWithServer</span><span class="params">(Server server, URI original)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> server.getHost();</span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> server.getPort();</span><br><span class="line">    <span class="type">String</span> <span class="variable">scheme</span> <span class="operator">=</span> server.getScheme();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (host.equals(original.getHost()) </span><br><span class="line">            &amp;&amp; port == original.getPort()</span><br><span class="line">            &amp;&amp; scheme == original.getScheme()) &#123;</span><br><span class="line">        <span class="keyword">return</span> original;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (scheme == <span class="literal">null</span>) &#123;</span><br><span class="line">        scheme = original.getScheme();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (scheme == <span class="literal">null</span>) &#123;</span><br><span class="line">        scheme = deriveSchemeAndPortFromPartialUri(original).first();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(scheme).append(<span class="string">&quot;://&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!Strings.isNullOrEmpty(original.getRawUserInfo())) &#123;</span><br><span class="line">            sb.append(original.getRawUserInfo()).append(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//替换host</span></span><br><span class="line">        sb.append(host);</span><br><span class="line">        <span class="keyword">if</span> (port &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">//加上端口</span></span><br><span class="line">            sb.append(<span class="string">&quot;:&quot;</span>).append(port);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(original.getRawPath());</span><br><span class="line">        <span class="keyword">if</span> (!Strings.isNullOrEmpty(original.getRawQuery())) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;?&quot;</span>).append(original.getRawQuery());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!Strings.isNullOrEmpty(original.getRawFragment())) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;#&quot;</span>).append(original.getRawFragment());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">URI</span> <span class="variable">newURI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URI</span>(sb.toString());</span><br><span class="line">        <span class="keyword">return</span> newURI;            </span><br><span class="line">    &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql not in 不走索引</title>
    <link href="/2022/02/15/Mysql%20not%20in%20%E4%B8%8D%E8%B5%B0%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/02/15/Mysql%20not%20in%20%E4%B8%8D%E8%B5%B0%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="测试数据和索引"><a href="#测试数据和索引" class="headerlink" title="测试数据和索引"></a>测试数据和索引</h2><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20220215191248745-1664519830_1730686613411.png"><br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20220215191305187-1158856986_1730686621846.png"></p><h3 id="MySQL5-7"><a href="#MySQL5-7" class="headerlink" title="MySQL5.7"></a>MySQL5.7</h3><p>打印执行计划，type是all走的全表<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20220215191404640-1699744545_1730686621846.png"></p><h3 id="MySQL8-0"><a href="#MySQL8-0" class="headerlink" title="MySQL8.0"></a>MySQL8.0</h3><p>type是range对索引进行范围扫描<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20220215192226393-1386245983_1730686621847.png"></p><h3 id="MySQL5-7解决方案"><a href="#MySQL5-7解决方案" class="headerlink" title="MySQL5.7解决方案"></a>MySQL5.7解决方案</h3><p>使用覆盖索引代替，not in就可以走索引了<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20220215192456122-1965915254_1730686621847.png"><br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20220215192605877-1433106593_1730686621847.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>m1 安装chromium</title>
    <link href="/2022/01/22/m1%20%E5%AE%89%E8%A3%85chromium/"/>
    <url>/2022/01/22/m1%20%E5%AE%89%E8%A3%85chromium/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask chromium</span><br></pre></td></tr></table></figure><p>如果下载失败，可以使用代理下载</p><p>下载后chromium打开失败，可以消除app的隔离属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xattr -r -d com.apple.quarantine /Applications/Chromium.app</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>homebrew使用临时代理</title>
    <link href="/2022/01/22/homebrew%E4%BD%BF%E7%94%A8%E4%B8%B4%E6%97%B6%E4%BB%A3%E7%90%86/"/>
    <url>/2022/01/22/homebrew%E4%BD%BF%E7%94%A8%E4%B8%B4%E6%97%B6%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ALL_PROXY=socks5://127.0.0.1:portnumber</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven打包时带上源码</title>
    <link href="/2021/11/16/Maven%E6%89%93%E5%8C%85%E6%97%B6%E5%B8%A6%E4%B8%8A%E6%BA%90%E7%A0%81/"/>
    <url>/2021/11/16/Maven%E6%89%93%E5%8C%85%E6%97%B6%E5%B8%A6%E4%B8%8A%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean source:jar install -DskipTests</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring boot 将jar包同目录的文件夹加入静态资源</title>
    <link href="/2021/10/25/spring%20boot%20%E5%B0%86jar%E5%8C%85%E5%90%8C%E7%9B%AE%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8A%A0%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    <url>/2021/10/25/spring%20boot%20%E5%B0%86jar%E5%8C%85%E5%90%8C%E7%9B%AE%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8A%A0%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">file:upload</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211025141404797-129654207_1730686630335.png"></p><p>效果：<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211025141429683-1984817132_1730686630335.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>word模板生成，基于freemarker</title>
    <link href="/2021/10/20/word%E6%A8%A1%E6%9D%BF%E7%94%9F%E6%88%90%EF%BC%8C%E5%9F%BA%E4%BA%8Efreemarker/"/>
    <url>/2021/10/20/word%E6%A8%A1%E6%9D%BF%E7%94%9F%E6%88%90%EF%BC%8C%E5%9F%BA%E4%BA%8Efreemarker/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="word模板生成，基于freemarker"><a href="#word模板生成，基于freemarker" class="headerlink" title="word模板生成，基于freemarker"></a>word模板生成，基于freemarker</h1><h2 id="创建word模板文档"><a href="#创建word模板文档" class="headerlink" title="创建word模板文档"></a>创建word模板文档</h2><p>文档的格式为docx，如果不是另存为docx文档<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211020101408861-898722344_1730686630335.png"></p><p><strong>注意是word文档(.docx)</strong></p><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211020101511629-1885950339_1730686630335.png"></p><h2 id="提取需要替换的文件"><a href="#提取需要替换的文件" class="headerlink" title="提取需要替换的文件"></a>提取需要替换的文件</h2><p>docx文档其实是zip格式的，修改后缀就可以看到文档里的实际内容<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211020101710009-1064901690_1730686630335.png"><br>用压缩软件打开<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211020110407836-925296304_1730686641760.png"></p><p>里面的内容符合<a href="http://www.officeopenxml.com/">微软officeopenxml规范</a></p><p>会用到的文件：</p><ul><li>[Content_Types].xml 文件格式的声明，如果加入新的图片格式，需要再这里添加</li><li>word&#x2F;media 图片存储的文件夹</li><li>word&#x2F;_rels&#x2F;document.xml.rels 文档图片的声明</li><li>word&#x2F;document.xml 文档的内容</li></ul><h2 id="创建freemarker模板"><a href="#创建freemarker模板" class="headerlink" title="创建freemarker模板"></a>创建freemarker模板</h2><p>将word&#x2F;_rels&#x2F;document.xml.rels和word&#x2F;document.xml复制并修改后缀名<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211020102930684-1987465277_1730686641760.png"></p><h3 id="替换一个标题"><a href="#替换一个标题" class="headerlink" title="替换一个标题"></a>替换一个标题</h3><p>在模板里找到标题<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211020103028034-1546279334_1730686641760.png"></p><h3 id="渲染图片列表"><a href="#渲染图片列表" class="headerlink" title="渲染图片列表"></a>渲染图片列表</h3><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211020105406015-208164383_1730686641760.png"></p><p>处理图片引用</p><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211020105717810-74506227_1730686641760.png"></p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>ImageVo.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImageVo</span><span class="params">(String id,String name,String file)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.path = file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.path = path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>word工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Configuration.VERSION_2_3_23);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        configuration.setDefaultEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//ftl模板文件</span></span><br><span class="line">        configuration.setClassForTemplateLoading(WordUtil.class, <span class="string">&quot;/template/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createWord</span><span class="params">(Map&lt;String,Object&gt; dataMap, String templateName, OutputStream outputStream)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获取模板</span></span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> configuration.getTemplate(templateName);</span><br><span class="line">        <span class="comment">//生成文件</span></span><br><span class="line">        template.process(dataMap, <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream, StandardCharsets.UTF_8)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">outFile</span> <span class="operator">=</span> <span class="string">&quot;out.docx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;ImageVo&gt; imageVos = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">absolutePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;image3.jpeg&quot;</span>).getAbsolutePath();</span><br><span class="line">        imageVos.add(<span class="keyword">new</span> <span class="title class_">ImageVo</span>(<span class="string">&quot;image1&quot;</span>,<span class="string">&quot;image20.jpeg&quot;</span>,absolutePath));</span><br><span class="line">        imageVos.add(<span class="keyword">new</span> <span class="title class_">ImageVo</span>(<span class="string">&quot;image2&quot;</span>,<span class="string">&quot;image21.jpeg&quot;</span>,absolutePath));</span><br><span class="line">        imageVos.add(<span class="keyword">new</span> <span class="title class_">ImageVo</span>(<span class="string">&quot;image3&quot;</span>,<span class="string">&quot;image22.jpeg&quot;</span>,absolutePath));</span><br><span class="line">        imageVos.add(<span class="keyword">new</span> <span class="title class_">ImageVo</span>(<span class="string">&quot;image4&quot;</span>,<span class="string">&quot;image23.jpeg&quot;</span>,absolutePath));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;填入的标题&quot;</span>);<span class="comment">//标题</span></span><br><span class="line">        params.put(<span class="string">&quot;imageList&quot;</span>,imageVos);<span class="comment">//图片列表</span></span><br><span class="line">        <span class="comment">//创建Zip流</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ZipInputStream</span> <span class="variable">zipInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;template/template.docx&quot;</span>).getStream());</span><br><span class="line">             <span class="type">ZipOutputStream</span> <span class="variable">zipOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outFile));</span><br><span class="line">        ) &#123;</span><br><span class="line">            ZipEntry entryIn;</span><br><span class="line">            <span class="keyword">while</span> ((entryIn = zipInputStream.getNextEntry()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">entryInName</span> <span class="operator">=</span> entryIn.getName();</span><br><span class="line">                <span class="type">ZipEntry</span> <span class="variable">entryOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(entryIn.getName());</span><br><span class="line"></span><br><span class="line">                zipOutputStream.putNextEntry(entryOut);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;word/_rels/document.xml.rels&quot;</span>.equals(entryInName)) &#123;</span><br><span class="line">                    <span class="comment">//处理图片引用</span></span><br><span class="line">                    WordUtil.createWord(params, <span class="string">&quot;rels.ftl&quot;</span>, zipOutputStream);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;word/document.xml&quot;</span>.equals(entryInName)) &#123;</span><br><span class="line">                    <span class="comment">//填充word模板</span></span><br><span class="line">                    WordUtil.createWord(params, <span class="string">&quot;document.ftl&quot;</span>, zipOutputStream);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//拷贝原始的字节</span></span><br><span class="line">                    IoUtil.copy(zipInputStream, zipOutputStream);</span><br><span class="line">                &#125;</span><br><span class="line">                zipOutputStream.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//写入图片</span></span><br><span class="line">            <span class="keyword">for</span> (ImageVo imageVo : imageVos) &#123;</span><br><span class="line">                <span class="type">ZipEntry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(<span class="string">&quot;word/media/&quot;</span> + imageVo.getName());</span><br><span class="line">                zipOutputStream.putNextEntry(e);</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">openStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(imageVo.getPath())) &#123;</span><br><span class="line">                    IoUtil.copy(openStream, zipOutputStream);</span><br><span class="line">                &#125;</span><br><span class="line">                zipInputStream.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;导出异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生成的效果图"><a href="#生成的效果图" class="headerlink" title="生成的效果图"></a>生成的效果图</h2><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211020110113264-1489170074_1730686650382.png"></p><p>表格也是有一定的逻辑，可以自己探索一下</p><h2 id="Git地址"><a href="#Git地址" class="headerlink" title="Git地址"></a>Git地址</h2><p><a href="https://gitee.com/huisunan/word-template-freemarker">https://gitee.com/huisunan/word-template-freemarker</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自定义逗号分隔转集合注解</title>
    <link href="/2021/10/13/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E8%BD%AC%E9%9B%86%E5%90%88%E6%B3%A8%E8%A7%A3/"/>
    <url>/2021/10/13/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E8%BD%AC%E9%9B%86%E5%90%88%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsa.common.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hsn</span></span><br><span class="line"><span class="comment"> * 2021/10/13</span></span><br><span class="line"><span class="comment"> * SpiltList</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpiltList &#123;</span><br><span class="line">    <span class="comment">//分割符</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义解析器"><a href="#自定义解析器" class="headerlink" title="自定义解析器"></a>自定义解析器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsa.common.data.resolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.ccsa.common.core.annotation.SpiltList;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.support.WebDataBinderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.NativeWebRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.ModelAndViewContainer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get方法里将逗号转成list</span></span><br><span class="line"><span class="comment"> * 1,2,3 ----&gt; [1,2,3]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hsn</span></span><br><span class="line"><span class="comment"> * 2021/10/13</span></span><br><span class="line"><span class="comment"> * SplitListHandlerMethodArgumentResolver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SplitListHandlerMethodArgumentResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Whether the given &#123;<span class="doctag">@linkplain</span> MethodParameter method parameter&#125; is</span></span><br><span class="line"><span class="comment">     * supported by this resolver.</span></span><br><span class="line"><span class="comment">     * 当参数里有SpiltList注解则调用该解析器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter the method parameter to check</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this resolver supports the supplied parameter;</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parameter.hasParameterAnnotation(SpiltList.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Resolves a method parameter into an argument value from a given request.</span></span><br><span class="line"><span class="comment">     * A &#123;<span class="doctag">@link</span> ModelAndViewContainer&#125; provides access to the model for the</span></span><br><span class="line"><span class="comment">     * request. A &#123;<span class="doctag">@link</span> WebDataBinderFactory&#125; provides a way to create</span></span><br><span class="line"><span class="comment">     * a &#123;<span class="doctag">@link</span> WebDataBinder&#125; instance when needed for data binding and</span></span><br><span class="line"><span class="comment">     * type conversion purposes.</span></span><br><span class="line"><span class="comment">     * 解析过程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter     the method parameter to resolve. This parameter must</span></span><br><span class="line"><span class="comment">     *                      have previously been passed to &#123;<span class="doctag">@link</span> #supportsParameter&#125; which must</span></span><br><span class="line"><span class="comment">     *                      have returned &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mavContainer  the ModelAndViewContainer for the current request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webRequest    the current request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> binderFactory a factory for creating &#123;<span class="doctag">@link</span> WebDataBinder&#125; instances</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the resolved argument value, or &#123;<span class="doctag">@code</span> null&#125; if not resolvable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception in case of errors with the preparation of argument values</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestParameter</span> <span class="operator">=</span> webRequest.getParameter(Objects.requireNonNull(parameter.getParameterName()));</span><br><span class="line">        <span class="type">SpiltList</span> <span class="variable">spiltList</span> <span class="operator">=</span> parameter.getParameterAnnotation(SpiltList.class);</span><br><span class="line">        <span class="keyword">assert</span> requestParameter != <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">assert</span> spiltList != <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//获取list里的泛型</span></span><br><span class="line">        <span class="type">ParameterizedType</span> <span class="variable">parameterizedType</span> <span class="operator">=</span> (ParameterizedType) parameter.getParameter().getParameterizedType();</span><br><span class="line">        <span class="keyword">if</span> (parameterizedType.getActualTypeArguments().length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;not found parameterizedType in List&lt;&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">actualTypeArgument</span> <span class="operator">=</span> parameterizedType.getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (!(actualTypeArgument <span class="keyword">instanceof</span> Class))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;get class fail&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(requestParameter))&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; type =(Class&lt;?&gt;) actualTypeArgument;</span><br><span class="line">        String[] split = requestParameter.split(spiltList.value());</span><br><span class="line">        <span class="comment">//调用泛型的valueOf方法，所以只支持基本的包装类型，这里也可以根据自己的需要进行处理</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">valueOfMethod</span> <span class="operator">=</span> type.getMethod(<span class="string">&quot;valueOf&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(split).map(item -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> valueOfMethod.invoke(<span class="literal">null</span>, item);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsa.common.data.mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ccsa.common.data.resolver.SplitListHandlerMethodArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hsn</span></span><br><span class="line"><span class="comment"> * 2021/10/13</span></span><br><span class="line"><span class="comment"> * WebConfig</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> <span class="title class_">SplitListHandlerMethodArgumentResolver</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;analyze&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">analyze</span><span class="params">(<span class="meta">@Size(min = 1,message = &quot;专业id不能为空&quot;)</span> <span class="meta">@SpiltList</span> List&lt;Integer&gt; majors)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> R.ok(reviewService.analyse(majors));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20211013132720570-1302493286_1730686650382.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql Json操作</title>
    <link href="/2021/08/28/Mysql%20Json%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/08/28/Mysql%20Json%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Json数组"><a href="#Json数组" class="headerlink" title="Json数组"></a>Json数组</h1><h2 id="数组包含某个数据"><a href="#数组包含某个数据" class="headerlink" title="数组包含某个数据"></a>数组包含某个数据</h2><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210828094049059-46282987_1730686650382.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">WHERE</span> JSON_CONTAINS(`<span class="keyword">value</span>`, <span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;$&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210828094121830-1738574518_1730686650382.png"></p><h2 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSON_LENGTH(`<span class="keyword">value</span>`,<span class="string">&#x27;$&#x27;</span>) <span class="keyword">from</span> test</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210828095430267-1737547699_1730686650382.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sql += 时事务问题</title>
    <link href="/2021/08/25/Sql%20+=%20%E6%97%B6%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98/"/>
    <url>/2021/08/25/Sql%20+=%20%E6%97%B6%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210825183204141-533674468_1730686657734.png"></p><h2 id="开启两个会话"><a href="#开启两个会话" class="headerlink" title="开启两个会话"></a>开启两个会话</h2><p>会话A和会话B</p><h3 id="会话A开启事务"><a href="#会话A开启事务" class="headerlink" title="会话A开启事务"></a>会话A开启事务</h3><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210825183349251-339977943_1730686657734.png"></p><h3 id="会话B开启事务"><a href="#会话B开启事务" class="headerlink" title="会话B开启事务"></a>会话B开启事务</h3><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210825183424015-928377680_1730686657734.png"></p><h3 id="会话A修改值"><a href="#会话A修改值" class="headerlink" title="会话A修改值"></a>会话A修改值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> test <span class="keyword">set</span> <span class="keyword">value</span> <span class="operator">=</span> <span class="keyword">value</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210825183520571-901495578_1730686657734.png"></p><h3 id="会话A查询值"><a href="#会话A查询值" class="headerlink" title="会话A查询值"></a>会话A查询值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">value</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line"><span class="operator">!</span>[](https:<span class="operator">/</span><span class="operator">/</span>raw.githubusercontent.com<span class="operator">/</span>huisunan<span class="operator">/</span>cdn<span class="operator">/</span>main<span class="operator">/</span>img<span class="operator">/</span><span class="number">1410909</span><span class="number">-20210825183558512</span><span class="number">-1669303133</span>_1730686657734.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 会话B查询值</span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">value</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line"><span class="operator">!</span>[](https:<span class="operator">/</span><span class="operator">/</span>raw.githubusercontent.com<span class="operator">/</span>huisunan<span class="operator">/</span>cdn<span class="operator">/</span>main<span class="operator">/</span>img<span class="operator">/</span><span class="number">1410909</span><span class="number">-20210825183638953</span><span class="number">-1458746126</span>_1730686664509.png)</span><br><span class="line"></span><br><span class="line">### 会话B修改值</span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">update</span> test <span class="keyword">set</span> <span class="keyword">value</span> <span class="operator">=</span> <span class="keyword">value</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210825183708298-1495738261_1730686664509.png"></p><p><strong>会话B被阻塞</strong></p><h3 id="会话A提交事务"><a href="#会话A提交事务" class="headerlink" title="会话A提交事务"></a>会话A提交事务</h3><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210825183837154-1483128401_1730686664509.png"></p><p>会话B修改成功<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210825183914350-1998235418_1730686664509.png"></p><h3 id="会话B提交事务"><a href="#会话B提交事务" class="headerlink" title="会话B提交事务"></a>会话B提交事务</h3><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210825183939532-798390138_1730686664509.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis锁的简单实现</title>
    <link href="/2021/07/05/Redis%E9%94%81%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/07/05/Redis%E9%94%81%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="RedisLock"><a href="#RedisLock" class="headerlink" title="RedisLock"></a>RedisLock</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLock</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">    ValueOperations&lt;String, String&gt; operations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        operations = redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">lockName</span> <span class="operator">=</span> <span class="string">&quot;redisLock&quot;</span>;</span><br><span class="line">    <span class="comment">//尝试加锁，可以根据自己的需求加上过期时间，也可也设置看门狗来对锁进行延时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(operations.setIfAbsent(lockName, Thread.currentThread().getName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//尝试解锁，只能解自己线程的锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> operations.get(lockName);</span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getName().equals(threadName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE.equals(redisTemplate.delete(lockName));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="竞争线程"><a href="#竞争线程" class="headerlink" title="竞争线程"></a>竞争线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    RedisLock redisLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LockThread</span><span class="params">(RedisLock redisLock)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisLock = redisLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//尝试在3s内获取到锁</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisLock.tryLock();</span><br><span class="line">            <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;开始干活&quot;</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                log.info(<span class="string">&quot;活干完了&quot;</span>);</span><br><span class="line">                redisLock.tryRelease();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;枪锁失败&quot;</span>);</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLockTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisLock redisLock;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">LockThread</span> <span class="variable">lockThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LockThread</span>(redisLock);</span><br><span class="line">        <span class="type">LockThread</span> <span class="variable">lockThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LockThread</span>(redisLock);</span><br><span class="line">        lockThread.start();</span><br><span class="line">        lockThread2.start();</span><br><span class="line">        lockThread.join();</span><br><span class="line">        lockThread2.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2021-07-05 12:03:46.723  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 抢锁失败</span><br><span class="line">2021-07-05 12:03:46.723  INFO 29540 --- [       Thread-2] com.study.redis.LockThread               : 开始干活</span><br><span class="line">2021-07-05 12:03:46.825  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 抢锁失败</span><br><span class="line">2021-07-05 12:03:46.936  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 抢锁失败</span><br><span class="line">2021-07-05 12:03:47.043  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 抢锁失败</span><br><span class="line">2021-07-05 12:03:47.153  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 抢锁失败</span><br><span class="line">2021-07-05 12:03:47.261  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 抢锁失败</span><br><span class="line">2021-07-05 12:03:47.363  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 抢锁失败</span><br><span class="line">2021-07-05 12:03:47.480  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 抢锁失败</span><br><span class="line">2021-07-05 12:03:47.588  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 抢锁失败</span><br><span class="line">2021-07-05 12:03:47.696  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 抢锁失败</span><br><span class="line">2021-07-05 12:03:47.727  INFO 29540 --- [       Thread-2] com.study.redis.LockThread               : 活干完了</span><br><span class="line">2021-07-05 12:03:47.806  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 开始干活</span><br><span class="line">2021-07-05 12:03:48.818  INFO 29540 --- [       Thread-3] com.study.redis.LockThread               : 活干完了</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jvm年轻代复制到Survivor To区时，对象存放不下会发生什么？</title>
    <link href="/2021/07/01/Jvm%E5%B9%B4%E8%BD%BB%E4%BB%A3%E5%A4%8D%E5%88%B6%E5%88%B0Survivor%20To%E5%8C%BA%E6%97%B6%EF%BC%8C%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%94%BE%E4%B8%8D%E4%B8%8B%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2021/07/01/Jvm%E5%B9%B4%E8%BD%BB%E4%BB%A3%E5%A4%8D%E5%88%B6%E5%88%B0Survivor%20To%E5%8C%BA%E6%97%B6%EF%BC%8C%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%94%BE%E4%B8%8D%E4%B8%8B%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>如果To区放不下会直接晋升到老年代</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">oop <span class="title">DefNewGeneration::copy_to_survivor_space</span><span class="params">(oop old)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(<span class="built_in">is_in_reserved</span>(old) &amp;&amp; !old-&gt;<span class="built_in">is_forwarded</span>(),</span><br><span class="line">         <span class="string">&quot;shouldn&#x27;t be scavenging this oop&quot;</span>);</span><br><span class="line">  <span class="type">size_t</span> s = old-&gt;<span class="built_in">size</span>();</span><br><span class="line">  oop obj = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Try allocating obj in to-space (unless too old)</span></span><br><span class="line">  <span class="keyword">if</span> (old-&gt;<span class="built_in">age</span>() &lt; <span class="built_in">tenuring_threshold</span>()) &#123;</span><br><span class="line">    <span class="comment">//如果对象的年龄低于tenuring_threshold，则该在to区申请一块同样大小的内存</span></span><br><span class="line">    obj = (oop) <span class="built_in">to</span>()-&gt;<span class="built_in">allocate_aligned</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Otherwise try allocating obj tenured</span></span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">//如果如果对象的年龄大于tenuring_threshold或者to区申请内存失败</span></span><br><span class="line">    <span class="comment">//则尝试将该对象复制到老年代</span></span><br><span class="line">    obj = _next_gen-&gt;<span class="built_in">promote</span>(old, s);</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">//复制失败</span></span><br><span class="line">      <span class="built_in">handle_promotion_failure</span>(old);</span><br><span class="line">      <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//to区中申请内存成功</span></span><br><span class="line">    <span class="type">const</span> intx interval = PrefetchCopyIntervalInBytes;</span><br><span class="line">    Prefetch::<span class="built_in">write</span>(obj, interval);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//对象复制</span></span><br><span class="line">    Copy::<span class="built_in">aligned_disjoint_words</span>((HeapWord*)old, (HeapWord*)obj, s);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//增加年龄，并修改age_table，增加对应年龄的总对象大小</span></span><br><span class="line">    <span class="comment">//注意此处是增加复制对象而非原来对象的分代年龄</span></span><br><span class="line">    obj-&gt;<span class="built_in">incr_age</span>();</span><br><span class="line">    <span class="built_in">age_table</span>()-&gt;<span class="built_in">add</span>(obj, s);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//将对象头指针指向新地址</span></span><br><span class="line">  old-&gt;forward_to(obj);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jvm内存布局和Java对象内存布局</title>
    <link href="/2021/07/01/Jvm%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%92%8CJava%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/"/>
    <url>/2021/07/01/Jvm%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%92%8CJava%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>先放一张图<br><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210701154238304-765244692_1730686672795.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArrayList的removeIf和iterator.remove性能比较</title>
    <link href="/2021/06/22/ArrayList%E7%9A%84removeIf%E5%92%8Citerator.remove%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
    <url>/2021/06/22/ArrayList%E7%9A%84removeIf%E5%92%8Citerator.remove%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springtestsuanfa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListTest</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">long</span> start;</span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100_0000</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用时:&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeArrayList</span><span class="params">()</span>&#123;</span><br><span class="line">        list.removeIf((item)-&gt;item % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">removeIterator</span><span class="params">()</span>&#123;</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (next % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>100_0000份数据，删除一半数据<br>removeIf() 22ms<br>iterator.remove 39962ms</p><h2 id="removeIf源码分析"><a href="#removeIf源码分析" class="headerlink" title="removeIf源码分析"></a>removeIf源码分析</h2><p>removeIf分为两部，先标记后整理<br>使用BitSet标记要删除的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeIf</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> E&gt; filter)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(filter);</span><br><span class="line">    <span class="comment">// figure out which elements are to be removed</span></span><br><span class="line">    <span class="comment">// any exception thrown from the filter predicate at this stage</span></span><br><span class="line">    <span class="comment">// will leave the collection unmodified</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">removeCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">BitSet</span> <span class="variable">removeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BitSet</span>(size);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> (E) elementData[i];</span><br><span class="line">        <span class="keyword">if</span> (filter.test(element)) &#123;</span><br><span class="line">            <span class="comment">//使用位图标记删除掉的元素</span></span><br><span class="line">            removeSet.set(i);</span><br><span class="line">            removeCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shift surviving elements left over the spaces left by removed elements</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">anyToRemove</span> <span class="operator">=</span> removeCount &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (anyToRemove) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">newSize</span> <span class="operator">=</span> size - removeCount;</span><br><span class="line">        <span class="comment">//整理,并将值交换，将未被删除的值覆盖掉已删除的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class="line">            i = removeSet.nextClearBit(i);</span><br><span class="line">            elementData[j] = elementData[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//去掉引用，让gc回收掉被删除的对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k=newSize; k &lt; size; k++) &#123;</span><br><span class="line">            elementData[k] = <span class="literal">null</span>;  <span class="comment">// Let gc do its work</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.size = newSize;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> anyToRemove;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeIterator</span><span class="params">()</span> &#123;</span><br><span class="line">    Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (next % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            iterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用ArrayList的remove方法</span></span><br><span class="line">            ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">            <span class="comment">//设置游标的位置</span></span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//数组拷贝</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>removeIf的时间复杂度是O(n)<br>iterator.remove的时间复杂度是O(n²)</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闲着没事做，用js做了一个冒泡排序的动画</title>
    <link href="/2021/06/14/%E9%97%B2%E7%9D%80%E6%B2%A1%E4%BA%8B%E5%81%9A%EF%BC%8C%E7%94%A8js%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%9A%84%E5%8A%A8%E7%94%BB/"/>
    <url>/2021/06/14/%E9%97%B2%E7%9D%80%E6%B2%A1%E4%BA%8B%E5%81%9A%EF%BC%8C%E7%94%A8js%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%9A%84%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://raw.githubusercontent.com/huisunan/cdn/main/img/1410909-20210614204455766-1774322076_1730686672795.gif"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> arr = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(&quot;#context ol&quot;).append(&quot;&lt;li style=&#x27;height:&quot; + item + &quot;px;left:&quot; + index * 30 + &quot;px&#x27;&gt;&quot; + item + &quot;&lt;/li&gt;&quot;)</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#context ol&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;li style=&#x27;height:&quot;</span> + item + <span class="string">&quot;px&#x27;&gt;&quot;</span> + item + <span class="string">&quot;&lt;/li&gt;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">mark</span>(<span class="params">i1, i2</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $($(<span class="string">&quot;#context ol li&quot;</span>)[i1]).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#faa755&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            $($(<span class="string">&quot;#context ol li&quot;</span>)[i2]).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#faa755&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">removeMark</span>(<span class="params">i1, i2</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $($(<span class="string">&quot;#context ol li&quot;</span>)[i1]).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;black&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            $($(<span class="string">&quot;#context ol li&quot;</span>)[i2]).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;black&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">i1, i2</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> liArr = $(<span class="string">&quot;#context ol&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;li&quot;</span>).<span class="title function_">toArray</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> temp = liArr[i1]</span></span><br><span class="line"><span class="language-javascript">            liArr[i1] = liArr[i2]</span></span><br><span class="line"><span class="language-javascript">            liArr[i2] = temp</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#context ol&quot;</span>).<span class="title function_">empty</span>()</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#context ol&quot;</span>).<span class="title function_">append</span>(liArr)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">time</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time));</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sort</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> next;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//升序排序</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span> - i; j++) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">mark</span>(j, j + <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> temp = arr[j]</span></span><br><span class="line"><span class="language-javascript">                        arr[j] = arr[j + <span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                        arr[j + <span class="number">1</span>] = temp</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">swap</span>(j,j+<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">removeMark</span>(j, j + <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#message&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;成功了！&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                arr.<span class="title function_">push</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">80</span>) + <span class="number">20</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">draw</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sort</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#context</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#context</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">vertical-align</span>: bottom;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;context&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jvm字节码计数器偏移问题</title>
    <link href="/2021/06/11/jvm%E5%AD%97%E8%8A%82%E7%A0%81%E8%AE%A1%E6%95%B0%E5%99%A8%E5%81%8F%E7%A7%BB%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/11/jvm%E5%AD%97%E8%8A%82%E7%A0%81%E8%AE%A1%E6%95%B0%E5%99%A8%E5%81%8F%E7%A7%BB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=4, args_size=1</span><br><span class="line">         0: bipush        10</span><br><span class="line">         2: istore_1</span><br><span class="line">         3: invokestatic  #7                  // Method getMessage:()Ljava/lang/String;</span><br><span class="line">         6: astore_2</span><br><span class="line">         7: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        10: aload_2</span><br><span class="line">        11: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        14: bipush        10</span><br><span class="line">        16: bipush        15</span><br></pre></td></tr></table></figure><p>这里的0直接到2了，为什么不是递增的，不是1呢？<br>这里的行号代表的是偏移量，bipush 后面还跟着了一个byte，所以对应的偏移量应该是1+1；类推invokestatic方法，后面跟着两个字节的方法地址，所以偏移量是1+2个字节</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es分页的坑</title>
    <link href="/2021/06/08/es%E5%88%86%E9%A1%B5%E7%9A%84%E5%9D%91/"/>
    <url>/2021/06/08/es%E5%88%86%E9%A1%B5%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>这里的form不是第几页的意思，而是偏移量，会导致查询的数据重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="comment">//form不是页码，是偏移量</span></span><br><span class="line">searchSourceBuilder.from(request.getCurrent().intValue() * request.getSize().intValue());</span><br><span class="line">searchSourceBuilder.size(request.getSize().intValue());</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring boot,spring mvc 添加多个映射mapping</title>
    <link href="/2021/06/07/spring%20boot,spring%20mvc%20%E6%B7%BB%E5%8A%A0%E5%A4%9A%E4%B8%AA%E6%98%A0%E5%B0%84mapping/"/>
    <url>/2021/06/07/spring%20boot,spring%20mvc%20%E6%B7%BB%E5%8A%A0%E5%A4%9A%E4%B8%AA%E6%98%A0%E5%B0%84mapping/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;&quot;api/analyse&quot;,&quot;public/analyse&quot;&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>swagger3生产环境下关闭</title>
    <link href="/2021/06/06/swagger3%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%85%B3%E9%97%AD/"/>
    <url>/2021/06/06/swagger3%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%85%B3%E9%97%AD/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">springfox:</span></span><br><span class="line">  <span class="attr">documentation:</span></span><br><span class="line">    <span class="attr">swagger-ui:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Jackson对字典翻译</title>
    <link href="/2021/05/25/%E4%BD%BF%E7%94%A8Jackson%E5%AF%B9%E5%AD%97%E5%85%B8%E7%BF%BB%E8%AF%91/"/>
    <url>/2021/05/25/%E4%BD%BF%E7%94%A8Jackson%E5%AF%B9%E5%AD%97%E5%85%B8%E7%BF%BB%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="使用Jackson对字典翻译"><a href="#使用Jackson对字典翻译" class="headerlink" title="使用Jackson对字典翻译"></a>使用Jackson对字典翻译</h1><blockquote><p>参考:<a href="https://juejin.cn/post/6844904053844115470">https://juejin.cn/post/6844904053844115470</a></p></blockquote><h2 id="字典项注解"><a href="#字典项注解" class="headerlink" title="字典项注解"></a>字典项注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DictValue &#123;</span><br><span class="line">    <span class="comment">//字典名称</span></span><br><span class="line">    DictEnum <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Bean序列化更改器"><a href="#Bean序列化更改器" class="headerlink" title="Bean序列化更改器"></a>Bean序列化更改器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DictSerializerModifier</span> <span class="keyword">extends</span> <span class="title class_">BeanSerializerModifier</span> &#123;</span><br><span class="line">    <span class="comment">//这个方法在类第一次序列化时会调用一次，确定后就不会再更改了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BeanPropertyWriter&gt; <span class="title function_">changeProperties</span><span class="params">(SerializationConfig config, BeanDescription beanDesc, List&lt;BeanPropertyWriter&gt; beanProperties)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanPropertyWriter beanProperty : beanProperties) &#123;</span><br><span class="line">            <span class="type">DictValue</span> <span class="variable">dictValue</span> <span class="operator">=</span> beanProperty.getAnnotation(DictValue.class);</span><br><span class="line">            <span class="keyword">if</span> (dictValue != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">DictFieldSerializer</span> <span class="variable">dictFieldSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DictFieldSerializer</span>(dictValue.value().getName());</span><br><span class="line">                <span class="comment">//自定以序列器</span></span><br><span class="line">                beanProperty.assignSerializer(dictFieldSerializer);</span><br><span class="line">                <span class="comment">//null值序列器</span></span><br><span class="line">                beanProperty.assignNullSerializer(NullSerializer.instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanProperties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义序列器"><a href="#自定义序列器" class="headerlink" title="自定义序列器"></a>自定义序列器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DictFieldSerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DictFieldSerializer</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义写入方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">IDictService</span> <span class="variable">dictService</span> <span class="operator">=</span> SpringTool.getBean(IDictService.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dictValue</span> <span class="operator">=</span> dictService.getDictValue(key, value.toString());</span><br><span class="line">        gen.writeString(dictValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SpringBoot配置"><a href="#SpringBoot配置" class="headerlink" title="SpringBoot配置"></a>SpringBoot配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ObjectMapper <span class="title function_">jacksonObjectMapper</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> &#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> builder.createXmlMapper(<span class="literal">false</span>).build();</span><br><span class="line">        objectMapper.setSerializerFactory(objectMapper.getSerializerFactory().withSerializerModifier(<span class="keyword">new</span> <span class="title class_">DictSerializerModifier</span>()));</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过代理的方式实现对httpClient的监控,超时回调</title>
    <link href="/2021/05/21/%E9%80%9A%E8%BF%87%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%AF%B9httpClient%E7%9A%84%E7%9B%91%E6%8E%A7,%E8%B6%85%E6%97%B6%E5%9B%9E%E8%B0%83/"/>
    <url>/2021/05/21/%E9%80%9A%E8%BF%87%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%AF%B9httpClient%E7%9A%84%E7%9B%91%E6%8E%A7,%E8%B6%85%E6%97%B6%E5%9B%9E%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="通过代理的方式实现对httpClient的监控-超时回调"><a href="#通过代理的方式实现对httpClient的监控-超时回调" class="headerlink" title="通过代理的方式实现对httpClient的监控,超时回调"></a>通过代理的方式实现对httpClient的监控,超时回调</h1><blockquote><p>实现的功能</p><p>1.记录请求时间<br>2.记录请求内容<br>3.简化回调<br>4.重时重试功能</p></blockquote><p>通过静态代理的方式实现</p><h2 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.记录请求时间</span></span><br><span class="line"><span class="comment"> * 2.记录请求内容</span></span><br><span class="line"><span class="comment"> * 3.简化回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryFutureProxy</span> <span class="keyword">implements</span> <span class="title class_">FutureCallback</span>&lt;HttpResponse&gt;, RetryFutureCallBack &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">requestLogger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;requestLogger&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已重试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">retryUse</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总重试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> retryCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> HttpUriRequest request;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RequestLogEntity requestLogEntity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前重试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RequestLogEntity nowRetryEntity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回调接口</span></span><br><span class="line">    <span class="keyword">protected</span> RetryFutureCallBack callBack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RetryFutureProxy</span><span class="params">(HttpUriRequest request)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(request,<span class="keyword">new</span> <span class="title class_">EmptyRetryFutureCallBack</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认为不重试的请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RetryFutureProxy</span><span class="params">(HttpUriRequest request, RetryFutureCallBack callBack)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(-<span class="number">1</span>, request,callBack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count   重试次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RetryFutureProxy</span><span class="params">(<span class="type">int</span> count, HttpUriRequest request, RetryFutureCallBack callBack)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.callBack = callBack;</span><br><span class="line">        <span class="built_in">this</span>.retryCount = count;</span><br><span class="line">        <span class="built_in">this</span>.request = request;</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity = <span class="keyword">new</span> <span class="title class_">RequestLogEntity</span>();</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity.setStartTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity.generateUrlInfo(request.getURI().toString());</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity.setStatus(RequestEnum.FAIL);</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity.setRetryCount(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (retryCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.requestLogEntity.setRetryList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录请求结果和打印日志</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logEndAndPrint</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        requestLogEntity.setUseTime(requestLogEntity.getEndTime().getTime() - requestLogEntity.getStartTime().getTime());</span><br><span class="line">        requestLogEntity.setResult(result);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;请求总用时:&#123;&#125;ms&quot;</span>, requestLogEntity.getUrl(), requestLogEntity.getUseTime());</span><br><span class="line">        requestLogger.info(JacksonUtil.toJson(requestLogEntity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录成功时的日志信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSuccess</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity.setEndTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity.setStatus(RequestEnum.SUCCESS);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//自定义回调</span></span><br><span class="line">            success(result);</span><br><span class="line"><span class="comment">//处理请求</span></span><br><span class="line">            handleRetryEntity(RequestEnum.SUCCESS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="built_in">this</span>.requestLogEntity.setStatus(RequestEnum.FAIL);</span><br><span class="line">            handleRetryEntity(RequestEnum.FAIL);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            logEndAndPrint(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//记录失败时的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFail</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity.setEndTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        handleRetryEntity(RequestEnum.FAIL);</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity.setStatus(RequestEnum.FAIL);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//失败回调</span></span><br><span class="line">            fail(result);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            logEndAndPrint(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFail</span><span class="params">()</span> &#123;</span><br><span class="line">        doFail(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//HttpClinet FutureCallback的回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(HttpResponse result)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> result.getEntity();</span><br><span class="line">            <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">            <span class="comment">//自定义错误处理,以&lt;html&gt; 开头则为nginx失败页面</span></span><br><span class="line">            <span class="keyword">if</span> (HttpUtil.isError(string)) &#123;</span><br><span class="line">                doFail(string);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                doSuccess(string);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;completed error&quot;</span>, e);</span><br><span class="line">            doFail();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志处理 填入请求结束时间，请求用时等数据</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleRetryEntity</span><span class="params">(RequestEnum requestEnum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.nowRetryEntity != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.nowRetryEntity.setEndTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="built_in">this</span>.nowRetryEntity.setUseTime(<span class="built_in">this</span>.nowRetryEntity.getEndTime().getTime() - <span class="built_in">this</span>.nowRetryEntity.getStartTime().getTime());</span><br><span class="line">            <span class="built_in">this</span>.nowRetryEntity.setStatus(requestEnum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失败重试</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRetry</span><span class="params">()</span> &#123;</span><br><span class="line">        handleRetryEntity(RequestEnum.FAIL);</span><br><span class="line">        retryUse++;</span><br><span class="line">        <span class="type">RequestLogEntity</span> <span class="variable">retryEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestLogEntity</span>();</span><br><span class="line">        retryEntity.setStartTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        retryEntity.setRetryCount(retryUse);</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity.getRetryList().add(retryEntity);</span><br><span class="line">        <span class="built_in">this</span>.requestLogEntity.setRetryCount(retryUse);</span><br><span class="line">        <span class="built_in">this</span>.nowRetryEntity = retryEntity;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;超时重试第&#123;&#125;次&quot;</span>, request.getURI().toString(), retryUse);</span><br><span class="line">        HttpUtil.asyncExecute(request, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> SocketTimeoutException &amp;&amp; retryUse &lt; retryCount &amp;&amp; retryCount != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//超时并且总请求次数小于3，执行重试</span></span><br><span class="line">            doRetry();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="comment">//超时后的异常处理</span></span><br><span class="line">            doFail();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按失败处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancelled</span><span class="params">()</span> &#123;</span><br><span class="line">        doFail();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用实现类的success的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">success</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        callBack.success(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用实现类的fail的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fail</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        callBack.fail(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HttpUriRequest <span class="title function_">getRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="简化的回调接口"><a href="#简化的回调接口" class="headerlink" title="简化的回调接口"></a>简化的回调接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RetryFutureCallBack</span> &#123;</span><br><span class="line">    <span class="comment">//成功回调</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">success</span><span class="params">(String result)</span>;</span><br><span class="line">    <span class="comment">//失败回调</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fail</span><span class="params">(String result)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不通过回调，通过阻塞的方式获取结果"><a href="#不通过回调，通过阻塞的方式获取结果" class="headerlink" title="不通过回调，通过阻塞的方式获取结果"></a>不通过回调，通过阻塞的方式获取结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmptyRetryFutureCallBack</span> <span class="keyword">implements</span> <span class="title class_">RetryFutureCallBack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> completed;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title function_">getResult</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (!completed) &#123;</span><br><span class="line">            <span class="comment">//超时等待3s</span></span><br><span class="line">            wait(<span class="number">1000</span> * <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">handleResult</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.completed = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">this</span>.result = result;</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">success</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        handleResult(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fail</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        handleResult(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日志类"><a href="#日志类" class="headerlink" title="日志类"></a>日志类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestLogEntity</span> &#123;</span><br><span class="line">    <span class="comment">//请求开始时间</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date startTime;</span><br><span class="line">    <span class="comment">//请求结束时间</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line">   <span class="comment">//用时ms</span></span><br><span class="line">    <span class="keyword">private</span> Long useTime;</span><br><span class="line">    <span class="comment">//请求域名或者主机ip</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="comment">//请求url参数</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; params;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="comment">//请求url</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">//请求结果</span></span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line">    <span class="comment">//重试次数</span></span><br><span class="line">    <span class="keyword">private</span> Integer retryCount;</span><br><span class="line">    <span class="comment">//解析数据后，数据的结果集大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> resultSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RequestEnum status;</span><br><span class="line">    <span class="keyword">private</span> List&lt;RequestLogEntity&gt; retryList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateUrlInfo</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="comment">//获取host</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(url))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] split = StringUtils.split(url, <span class="string">&quot;?&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (split == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (split.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.host = split[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (split.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                generateParam(split[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;解析url失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">generateParam</span><span class="params">(String paramString)</span> &#123;</span><br><span class="line">        String[] split = StringUtils.split(paramString, <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String item : split) &#123;</span><br><span class="line">            String[] itemSplit = StringUtils.split(item, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (itemSplit == <span class="literal">null</span> || itemSplit.length == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">this</span>.params.put(itemSplit[<span class="number">0</span>], itemSplit.length == <span class="number">2</span> ? itemSplit[<span class="number">1</span>] : <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义回调类实现"><a href="#自定义回调类实现" class="headerlink" title="自定义回调类实现"></a>自定义回调类实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Sl4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MyCallBack</span> <span class="keyword">implements</span> <span class="title class_">RetryFutureCallBack</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">success</span><span class="params">(String result)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;成功请求结果:&#123;&#125;&quot;</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fail</span><span class="params">(String result)</span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;请求失败结果:&#123;&#125;&quot;</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HttpUtil类"><a href="#HttpUtil类" class="headerlink" title="HttpUtil类"></a>HttpUtil类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APPLICATION_JSON</span> <span class="operator">=</span> <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONTENT_TYPE_FORM_URL</span> <span class="operator">=</span> <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">CloseableHttpAsyncClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">PoolingHttpClientConnectionManager</span> <span class="variable">connectionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolingHttpClientConnectionManager</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setConnectTimeout表示设置建立连接的超时时间</span></span><br><span class="line">    <span class="comment">// setConnectionRequestTimeout表示从连接池中拿连接的等待超时时间</span></span><br><span class="line">    <span class="comment">// setSocketTimeout表示发出请求后等待对端应答的超时时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">CONNECT_TIMEOUT</span> <span class="operator">=</span> <span class="number">3_000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">CONNECTION_REQUEST_TIMEOUT</span> <span class="operator">=</span> <span class="number">3_000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">SOCKET_TIMEOUT</span> <span class="operator">=</span> <span class="number">3_000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig</span><br><span class="line">            .custom()</span><br><span class="line">            .setConnectTimeout(CONNECT_TIMEOUT)</span><br><span class="line">            .setConnectionRequestTimeout(CONNECTION_REQUEST_TIMEOUT)</span><br><span class="line">            .setSocketTimeout(SOCKET_TIMEOUT)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 总连接池数量</span></span><br><span class="line">        connectionManager.setMaxTotal(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//将每个路由的默认最大连接数增加到500</span></span><br><span class="line">        connectionManager.setDefaultMaxPerRoute(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//连接存活时间</span></span><br><span class="line">        connectionManager.setValidateAfterInactivity(<span class="number">60_000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CloseableHttpAsyncClient <span class="title function_">getHttpAsyncClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (client == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//配置io线程</span></span><br><span class="line">                    <span class="type">IOReactorConfig</span> <span class="variable">ioReactorConfig</span> <span class="operator">=</span> IOReactorConfig.custom().</span><br><span class="line">                            setIoThreadCount(Runtime.getRuntime().availableProcessors() * <span class="number">2</span>)</span><br><span class="line">                            .setSoKeepAlive(<span class="literal">true</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    <span class="comment">//设置连接池大小</span></span><br><span class="line">                    <span class="type">ConnectingIOReactor</span> <span class="variable">ioReactor</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ioReactor = <span class="keyword">new</span> <span class="title class_">DefaultConnectingIOReactor</span>(ioReactorConfig);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOReactorException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">PoolingNHttpClientConnectionManager</span> <span class="variable">connManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolingNHttpClientConnectionManager</span>(ioReactor);</span><br><span class="line">                    connManager.setMaxTotal(<span class="number">1000</span>);<span class="comment">//最大连接数设置</span></span><br><span class="line">                    connManager.setDefaultMaxPerRoute(<span class="number">500</span>);<span class="comment">//per route最大连接数设置</span></span><br><span class="line">                    client = HttpAsyncClients.custom()</span><br><span class="line">                            .setConnectionManager(connManager)</span><br><span class="line"><span class="comment">//                            .setKeepAliveStrategy(keepAliveStrategy)</span></span><br><span class="line">                            .setDefaultRequestConfig(requestConfig)</span><br><span class="line">                            .build();</span><br><span class="line">                    client.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//开启监控线程,对异常和空闲线程进行关闭</span></span><br><span class="line">                    <span class="type">ScheduledExecutorService</span> <span class="variable">monitorExecutor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">                    monitorExecutor.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="comment">//关闭异常连接</span></span><br><span class="line">                            connectionManager.closeExpiredConnections();</span><br><span class="line">                            <span class="comment">//关闭5s空闲的连接</span></span><br><span class="line">                            connectionManager.closeIdleConnections(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">                            log.debug(<span class="string">&quot;close expired and idle for over 5s connection&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="number">3</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Future&lt;HttpResponse&gt; <span class="title function_">asyncExecute</span><span class="params">(RetryFutureProxy retryFutureProxy)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpAsyncClient</span> <span class="variable">httpAsyncClient</span> <span class="operator">=</span> getHttpAsyncClient();</span><br><span class="line">        <span class="keyword">return</span> httpAsyncClient.execute(retryFutureProxy.request, retryFutureProxy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Future&lt;HttpResponse&gt; <span class="title function_">asyncExecute</span><span class="params">(HttpUriRequest request, FutureCallback&lt;HttpResponse&gt; callback)</span> &#123;</span><br><span class="line">        <span class="type">CloseableHttpAsyncClient</span> <span class="variable">httpAsyncClient</span> <span class="operator">=</span> getHttpAsyncClient();</span><br><span class="line">        <span class="keyword">return</span> httpAsyncClient.execute(request, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isError</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * nginx 500 页面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; result.startsWith(<span class="string">&quot;&lt;html&gt;&quot;</span>)) &#123;</span><br><span class="line">            log.info(result);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//阻塞方式获取结果内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">httpRequest</span><span class="params">(String urlString)</span> &#123;</span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(urlString);</span><br><span class="line">        <span class="type">EmptyRetryFutureCallBack</span> <span class="variable">callBack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmptyRetryFutureCallBack</span>();</span><br><span class="line">        asyncExecute(httpGet, <span class="keyword">new</span> <span class="title class_">RetryFutureProxy</span>(httpGet, callBack));</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//HttpEntity被EntityUtils.toString(entity)消费过了，采用这种方式获取结果集</span></span><br><span class="line">            result = callBack.getResult();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;httpUtil exception&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line"><span class="type">RetryFutureProxy</span> <span class="variable">retryFutureProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RetryFutureProxy</span>(<span class="number">2</span>,httpGet,<span class="keyword">new</span> <span class="title class_">MyCallBack</span>() );</span><br><span class="line">HttpUtil.asyncExecute(retryFutureProxy);</span><br><span class="line"><span class="comment">//防止主线程结束，回调还没结束</span></span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="阻塞式调用"><a href="#阻塞式调用" class="headerlink" title="阻塞式调用"></a>阻塞式调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpUtil.httpRequest(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mapstruct 1.4.2和lombok 1.18.16之后版本，报错和mapstruct生成空的实现</title>
    <link href="/2021/05/14/mapstruct%201.4.2%E5%92%8Clombok%201.18.16%E4%B9%8B%E5%90%8E%E7%89%88%E6%9C%AC%EF%BC%8C%E6%8A%A5%E9%94%99%E5%92%8Cmapstruct%E7%94%9F%E6%88%90%E7%A9%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/05/14/mapstruct%201.4.2%E5%92%8Clombok%201.18.16%E4%B9%8B%E5%90%8E%E7%89%88%E6%9C%AC%EF%BC%8C%E6%8A%A5%E9%94%99%E5%92%8Cmapstruct%E7%94%9F%E6%88%90%E7%A9%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.mapstruct.version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">org.mapstruct.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok-mapstruct-binding<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  <span class="comment">&lt;!-- 如果是0.1.0 有可能出现生成了maptruct的实现类，但该类只创建了对象，没有进行赋值 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins + sonar 中文文件名报错解决</title>
    <link href="/2021/05/10/jenkins%20+%20sonar%20%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6%E5%90%8D%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/05/10/jenkins%20+%20sonar%20%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6%E5%90%8D%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="https://imgtu.com/i/gNekz8"><img src="https://z3.ax1x.com/2021/05/10/gNekz8.png" alt="gNekz8.png"></a><br>在Jvm options 中加入参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dsun.jnu.encoding=UTF-8 -Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 启动jar脚本</title>
    <link href="/2021/05/07/linux%20%E5%90%AF%E5%8A%A8jar%E8%84%9A%E6%9C%AC/"/>
    <url>/2021/05/07/linux%20%E5%90%AF%E5%8A%A8jar%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志地址</span></span><br><span class="line">LOG_NAME=/home/local/jar/log/admin.log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">app名称</span></span><br><span class="line">APP_NAME=/home/local/jar/mall-admin.jar</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">脚本菜单项</span></span><br><span class="line">usage() &#123;</span><br><span class="line"> echo &quot;Usage: sh 脚本名.sh [start|stop|restart|status]&quot;</span><br><span class="line"> exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">is_exist()&#123;</span><br><span class="line"> pid=`jps -l|grep $APP_NAME|awk &#x27;&#123;print $1&#125;&#x27; `</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">如果不存在返回1，存在返回0</span></span><br><span class="line"> if [ -z &quot;$&#123;pid&#125;&quot; ]; then</span><br><span class="line"> return 1</span><br><span class="line"> else</span><br><span class="line"> return 0</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动脚本</span></span><br><span class="line">start()&#123;</span><br><span class="line"> is_exist</span><br><span class="line"> if [ $? -eq &quot;0&quot; ]; then</span><br><span class="line"> echo &quot;$&#123;APP_NAME&#125; is already running. pid=$&#123;pid&#125; .&quot;</span><br><span class="line"> else</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">此处注意修改jar和<span class="built_in">log</span>文件文件位置：</span></span><br><span class="line">source /etc/profile</span><br><span class="line"> nohup java -jar $&#123;APP_NAME&#125; &gt;&gt; $&#123;LOG_NAME&#125;   2&gt;&amp;1 &amp;</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止脚本</span></span><br><span class="line">stop()&#123;</span><br><span class="line"> is_exist</span><br><span class="line"> if [ $? -eq &quot;0&quot; ]; then</span><br><span class="line"> kill -9 $pid</span><br><span class="line"> else</span><br><span class="line"> echo &quot;$&#123;APP_NAME&#125; is not running&quot;</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示当前jar运行状态</span></span><br><span class="line">status()&#123;</span><br><span class="line"> is_exist</span><br><span class="line"> if [ $? -eq &quot;0&quot; ]; then</span><br><span class="line"> echo &quot;$&#123;APP_NAME&#125; is running. Pid is $&#123;pid&#125;&quot;</span><br><span class="line"> else</span><br><span class="line"> echo &quot;$&#123;APP_NAME&#125; is NOT running.&quot;</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启脚本</span></span><br><span class="line">restart()&#123;</span><br><span class="line"> stop</span><br><span class="line"> start</span><br><span class="line"> echo &quot;$&#123;APP_NAME&#125; restart&quot;</span><br><span class="line">return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line"> &quot;start&quot;)</span><br><span class="line"> start</span><br><span class="line"> ;;</span><br><span class="line"> &quot;stop&quot;)</span><br><span class="line"> stop</span><br><span class="line"> ;;</span><br><span class="line"> &quot;status&quot;)</span><br><span class="line"> status</span><br><span class="line"> ;;</span><br><span class="line"> &quot;restart&quot;)</span><br><span class="line"> restart</span><br><span class="line"> ;;</span><br><span class="line"> *)</span><br><span class="line"> usage</span><br><span class="line"> ;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SqlDeveloper字体大小设置</title>
    <link href="/2021/05/07/SqlDeveloper%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE/"/>
    <url>/2021/05/07/SqlDeveloper%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>C:\Users\huisunan\AppData\Roaming\SQL Developer\system19.2.1.247.2212\o.sqldeveloper<br>下的<br>ide.properties<br>修改 Ide.FontSize&#x3D;20</p>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot中JavaMailSender发送附件以及遇到的问题</title>
    <link href="/2021/05/07/SpringBoot%E4%B8%ADJavaMailSender%E5%8F%91%E9%80%81%E9%99%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/05/07/SpringBoot%E4%B8%ADJavaMailSender%E5%8F%91%E9%80%81%E9%99%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>中文附件名过长变成.bat文件<br>解决:<br>&#x2F;&#x2F;防止中文名字 base64加密以后 名字太长被截断 导致中文乱码问题<br>System.getProperties().setProperty(“mail.mime.splitlongparameters”, “false”);</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis传入list的注意点</title>
    <link href="/2021/05/07/Mybatis%E4%BC%A0%E5%85%A5list%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <url>/2021/05/07/Mybatis%E4%BC%A0%E5%85%A5list%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>当mybatis传入参数为list集合的时候；mybatis会自动把其封装为一个map；会以“list”作为key</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每个元素的值作为value；格式为Map&lt;&quot;list&quot;,value&gt;</span><br><span class="line">当mybatis传入参数为数组的时候mybatis会自动把其封装为一个map；会以“array”作为key；</span><br><span class="line">每个元素的值作为value；格式为Map&lt;&quot;array&quot;,value&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>synchronized锁</title>
    <link href="/2021/05/07/synchronized%E9%94%81/"/>
    <url>/2021/05/07/synchronized%E9%94%81/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="synchronized的实现"><a href="#synchronized的实现" class="headerlink" title="synchronized的实现"></a>synchronized的实现</h1><h2 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h2><p>synchronized用的锁是存在Java对象头里的。如果对象是数组类型，则虚拟机用3个字宽（Word）存储对象头，如果对象是非数组类型，则用2字宽存储对象头。在32位虚拟机中，1字宽等于4字节，即32bit。</p><p><a href="https://imgtu.com/i/g1ozct"><img src="https://z3.ax1x.com/2021/05/07/g1ozct.png" alt="g1ozct.png"></a></p><p>Java对象头里的Mark Word里默认存储对象的HashCode、分代年龄和锁标记位。32位JVM的Mark Word的默认存储结构：</p><p><a href="https://imgtu.com/i/g1TKBT"><img src="https://z3.ax1x.com/2021/05/07/g1TKBT.png" alt="g1TKBT.png"></a></p><p>在运行期间，Mark Word里存储的数据会随着锁标志位的变化而变化。Mark Word可能变化为存储以下4种数据：</p><p><a href="https://imgtu.com/i/g1T1N4"><img src="https://z3.ax1x.com/2021/05/07/g1T1N4.png" alt="g1T1N4.png"></a></p><h2 id="锁的升级与对比"><a href="#锁的升级与对比" class="headerlink" title="锁的升级与对比"></a>锁的升级与对比</h2><p>Java SE 1.6为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”，在Java SE 1.6中，锁一共有4种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>HotSpot的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p><ul><li><p>偏向锁的撤销需要等待全局安全点，暂停持有该锁的线程，同时检查该线程是否还在执行该方法，如果是，则升级锁。反之则其他线程抢占。</p></li><li><p>即如果线程在全局安全点检查时，还需要使用该锁 则进行锁升级，如果线程已经不需要使用锁，并有其他线程需要使用时，将偏向锁的拥有者切换为另外线程。<br><a href="https://imgtu.com/i/g1TUu6"><img src="https://z3.ax1x.com/2021/05/07/g1TUu6.png" alt="g1TUu6.png"></a></p></li></ul><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。<br><a href="https://imgtu.com/i/g1TD4H"><img src="https://z3.ax1x.com/2021/05/07/g1TD4H.png" alt="g1TD4H.png"></a></p><p>因为自旋会消耗CPU，为了避免无用的自旋（比如获得锁的线程被阻塞住了），一旦锁升级成重量级锁，就不会再恢复到轻量级锁状态。当锁处于这个状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争。</p><p><a href="https://imgtu.com/i/g1T6gI"><img src="https://z3.ax1x.com/2021/05/07/g1T6gI.png" alt="g1T6gI.png"></a></p><h2 id="锁的优缺点"><a href="#锁的优缺点" class="headerlink" title="锁的优缺点"></a>锁的优缺点</h2><p><a href="https://imgtu.com/i/g1T2KP"><img src="https://z3.ax1x.com/2021/05/07/g1T2KP.png" alt="g1T2KP.png"></a></p><h2 id="synchronized修饰"><a href="#synchronized修饰" class="headerlink" title="synchronized修饰"></a>synchronized修饰</h2><h3 id="修饰代码块-实例"><a href="#修饰代码块-实例" class="headerlink" title="修饰代码块(实例)"></a>修饰代码块(实例)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> i ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过javap -verbose XXX.class命令查看class文件信息来具体分析两者实现上的差异。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> <span class="title function_">demo</span>();</span><br><span class="line">   <span class="attr">descriptor</span>: ()V</span><br><span class="line">   <span class="attr">flags</span>: <span class="variable constant_">ACC_PUBLIC</span></span><br><span class="line">   <span class="title class_">Code</span>:</span><br><span class="line">     stack=<span class="number">3</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">        <span class="number">0</span>: aload_0</span><br><span class="line">        <span class="number">1</span>: dup</span><br><span class="line">        <span class="number">2</span>: astore_1</span><br><span class="line">        <span class="number">3</span>: monitorenter   #进入同步代码块</span><br><span class="line">        <span class="number">4</span>: aload_0</span><br><span class="line">        <span class="number">5</span>: dup</span><br><span class="line">        <span class="number">6</span>: getfield      #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line">        <span class="number">9</span>: iconst_1</span><br><span class="line">       <span class="number">10</span>: iadd</span><br><span class="line">       <span class="number">11</span>: putfield      #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line">       <span class="number">14</span>: aload_1</span><br><span class="line">       <span class="number">15</span>: monitorexit   #正常退出同步代码块</span><br><span class="line">       <span class="number">16</span>: goto          <span class="number">24</span></span><br><span class="line">       <span class="number">19</span>: astore_2</span><br><span class="line">       <span class="number">20</span>: aload_1</span><br><span class="line">       <span class="number">21</span>: monitorexit   #异常退出同步代码块</span><br><span class="line">       <span class="number">22</span>: aload_2</span><br><span class="line">       <span class="number">23</span>: athrow</span><br><span class="line">       <span class="number">24</span>: <span class="keyword">return</span></span><br><span class="line">     <span class="title class_">Exception</span> <span class="attr">table</span>:</span><br><span class="line">        <span class="keyword">from</span>    to  target type</span><br><span class="line">            <span class="number">4</span>    <span class="number">16</span>    <span class="number">19</span>   any</span><br><span class="line">           <span class="number">19</span>    <span class="number">22</span>    <span class="number">19</span>   any</span><br></pre></td></tr></table></figure><h3 id="修饰方法-静态方法"><a href="#修饰方法-静态方法" class="headerlink" title="修饰方法(静态方法)"></a>修饰方法(静态方法)</h3><p>class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> i ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span>&#123;</span><br><span class="line">       i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public synchronized <span class="keyword">void</span> <span class="title function_">demo</span>();</span><br><span class="line">    <span class="attr">descriptor</span>: ()V</span><br><span class="line">    <span class="comment">//ACC_SYNCHRONIZED 被修饰的方法为同步方法</span></span><br><span class="line">    <span class="attr">flags</span>: <span class="variable constant_">ACC_PUBLIC</span>, <span class="variable constant_">ACC_SYNCHRONIZED</span></span><br><span class="line">    <span class="title class_">Code</span>:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: dup</span><br><span class="line">         <span class="number">2</span>: getfield      #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line">         <span class="number">5</span>: iconst_1</span><br><span class="line">         <span class="number">6</span>: iadd</span><br><span class="line">         <span class="number">7</span>: putfield      #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line">        <span class="number">10</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>synchronized修饰方法并没有通过插入monitorentry和monitorexit指令来实现，而是在方法表结构中的访问标志（access_flags)设置ACC_SYNCHRONIZED标志来实现。线程在执行方法前先判断access_flags是否标记ACC_SYNCHRONIZED，如果标记则在执行方法前先去获取monitor对象，获取成功则执行方法代码且执行完毕后释放monitor对象，获取失败则表示monitor对象被其他线程获取从而阻塞当前线程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撸红黑树</title>
    <link href="/2021/05/07/%E6%89%8B%E6%92%B8%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <url>/2021/05/07/%E6%89%8B%E6%92%B8%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>红黑树也是二叉查找树，我们知道，二叉查找树这一数据结构并不难，而红黑树之所以难是难在它是自平衡的二叉查找树，在进行插入和删除等可能会破坏树的平衡的操作时，需要重新自处理达到平衡状态。</p><h1 id="红黑树定义和性质"><a href="#红黑树定义和性质" class="headerlink" title="红黑树定义和性质"></a>红黑树定义和性质</h1><p>红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：</p><ul><li>性质1：每个节点要么是黑色，要么是红色。</li><li>性质2：根节点是黑色。</li><li>性质3：每个叶子节点（NIL）是黑色。</li><li>性质4：每个红色结点的两个子结点一定都是黑色。</li><li>性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点(又叫黑高)。</li></ul><h1 id="节点的结构"><a href="#节点的结构" class="headerlink" title="节点的结构"></a>节点的结构</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;K&gt;, V&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K, V&gt; parent;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K, V&gt; left;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K, V&gt; right;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> red;</span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(K key, V value, <span class="type">boolean</span> red)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.red = red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><p>插入的情景</p><h2 id="1-红黑树为空树"><a href="#1-红黑树为空树" class="headerlink" title="1 红黑树为空树"></a>1 红黑树为空树</h2><p>把插入结点作为根结点，并把结点设置为黑色。</p><h2 id="2-插入结点的Key已存在"><a href="#2-插入结点的Key已存在" class="headerlink" title="2 插入结点的Key已存在"></a>2 插入结点的Key已存在</h2><p>更新当前结点的值为插入结点的值</p><h2 id="3-插入结点的父结点为黑结点"><a href="#3-插入结点的父结点为黑结点" class="headerlink" title="3 插入结点的父结点为黑结点"></a>3 插入结点的父结点为黑结点</h2><p>直接插入</p><h2 id="4-插入结点的父结点为红结点"><a href="#4-插入结点的父结点为红结点" class="headerlink" title="4 插入结点的父结点为红结点"></a>4 插入结点的父结点为红结点</h2><h3 id="4-1-叔叔结点存在并且为红结点"><a href="#4-1-叔叔结点存在并且为红结点" class="headerlink" title="4.1 叔叔结点存在并且为红结点"></a>4.1 叔叔结点存在并且为红结点</h3><p>父节点染成黑色<br>叔叔节点染成黑色<br>爷爷节点染成红色<br>将爷爷节点设置成当前节点，继续修复</p><h3 id="4-2-叔叔结点不存在或为黑结点-并且插入结点的父亲结点是祖父结点的左子结点"><a href="#4-2-叔叔结点不存在或为黑结点-并且插入结点的父亲结点是祖父结点的左子结点" class="headerlink" title="4.2 叔叔结点不存在或为黑结点,并且插入结点的父亲结点是祖父结点的左子结点"></a>4.2 叔叔结点不存在或为黑结点,并且插入结点的父亲结点是祖父结点的左子结点</h3><h4 id="4-2-1-插入结点是其父结点的左子结点-ll双红"><a href="#4-2-1-插入结点是其父结点的左子结点-ll双红" class="headerlink" title="4.2.1 插入结点是其父结点的左子结点(ll双红)"></a>4.2.1 插入结点是其父结点的左子结点(ll双红)</h4><p>父节点染成黑色<br>爷爷节点染成红色<br>对爷爷节点右旋</p><h4 id="4-2-2-插入结点是其父结点的右子结点-lr双红"><a href="#4-2-2-插入结点是其父结点的右子结点-lr双红" class="headerlink" title="4.2.2 插入结点是其父结点的右子结点(lr双红)"></a>4.2.2 插入结点是其父结点的右子结点(lr双红)</h4><p>对父节点进行左旋<br>将父节点当作当前节点进行4.2.1处理</p><h3 id="4-3-叔叔结点不存在或为黑结点-并且插入结点的父亲结点是祖父结点的右子结点"><a href="#4-3-叔叔结点不存在或为黑结点-并且插入结点的父亲结点是祖父结点的右子结点" class="headerlink" title="4.3 叔叔结点不存在或为黑结点,并且插入结点的父亲结点是祖父结点的右子结点"></a>4.3 叔叔结点不存在或为黑结点,并且插入结点的父亲结点是祖父结点的右子结点</h3><h4 id="4-3-1-插入结点是其父结点的右子结点-rr双红"><a href="#4-3-1-插入结点是其父结点的右子结点-rr双红" class="headerlink" title="4.3.1 插入结点是其父结点的右子结点(rr双红)"></a>4.3.1 插入结点是其父结点的右子结点(rr双红)</h4><p>将父亲节点染成黑色<br>爷爷节点染成红色<br>对爷爷节点左旋</p><h4 id="4-3-2-插入结点是其父结点的左子结点-rl双红"><a href="#4-3-2-插入结点是其父结点的左子结点-rl双红" class="headerlink" title="4.3.2 插入结点是其父结点的左子结点(rl双红)"></a>4.3.2 插入结点是其父结点的左子结点(rl双红)</h4><p>对父节点进行右旋<br>将父节点当作当前节点进行4.3.2处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//根节点必须是黑的</span></span><br><span class="line">           root = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, value, <span class="literal">false</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       Node&lt;K, V&gt; node = root, parent = <span class="literal">null</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//找出待插入的节点</span></span><br><span class="line">       <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">           i = key.compareTo(node.key);</span><br><span class="line">           <span class="comment">//key等于时</span></span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">               parent = node;</span><br><span class="line">               node = node.left;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               parent = node;</span><br><span class="line">               node = node.right;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, value, <span class="literal">true</span>);</span><br><span class="line">       node.parent = parent;</span><br><span class="line">       <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           parent.left = node;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           parent.right = node;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//修复红黑树</span></span><br><span class="line">       check(node);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="红黑树修复"><a href="#红黑树修复" class="headerlink" title="红黑树修复"></a>红黑树修复</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(Node&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        <span class="comment">//p是父节点  pp爷爷节点  u叔叔节点</span></span><br><span class="line">        Node&lt;K, V&gt; p, pp, u;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将根节点染成黑色</span></span><br><span class="line">        root.red = <span class="literal">false</span>;</span><br><span class="line">        p = node.parent;</span><br><span class="line">        <span class="comment">//父节点是黑色，插入的节点是红色，不影响树结构，直接插入</span></span><br><span class="line">        <span class="comment">//父节点是红色</span></span><br><span class="line">        <span class="keyword">if</span> (p!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//父节点是红色</span></span><br><span class="line">            <span class="keyword">if</span> (p.red)&#123;</span><br><span class="line">                pp = p.parent;</span><br><span class="line">                <span class="comment">//判断叔叔节点在哪边</span></span><br><span class="line">                u = p.equals(pp.left) ? pp.right : pp.left;</span><br><span class="line">                <span class="comment">//叔叔节点不存在或者叔叔节点是黑色</span></span><br><span class="line">                <span class="keyword">if</span> (u == <span class="literal">null</span> || !u.red) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p.equals(pp.left)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (node.equals(p.left)) &#123;</span><br><span class="line">                            <span class="comment">//对应ll 双红结构</span></span><br><span class="line">                            ll(node);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//对应lr 双红结构</span></span><br><span class="line">                            lr(node);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (node.equals(p.right)) &#123;</span><br><span class="line">                            <span class="comment">//对应rr 双红结构</span></span><br><span class="line">                            rr(node);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//对应rl 双红结构</span></span><br><span class="line">                            rl(node);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//叔叔节点存在   将叔叔和父亲节点染成黑色   爷爷节点染成红色  以爷爷节点进行下一步修复</span></span><br><span class="line">                    p.red = <span class="literal">false</span>;</span><br><span class="line">                    u.red = <span class="literal">false</span>;</span><br><span class="line">                    pp.red = <span class="literal">true</span>;</span><br><span class="line">                    check(pp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ll双红  p-&gt;黑  pp-&gt; 红 将父节点变成黑色  爷爷节点变成红色  然后右旋</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ll</span><span class="params">(Node&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        Node&lt;K, V&gt; p = node.parent, pp = p.parent, t;</span><br><span class="line">        p.red = <span class="literal">false</span>;</span><br><span class="line">        pp.red = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//右旋</span></span><br><span class="line">        t = p.right;</span><br><span class="line">        p.right = pp;</span><br><span class="line">        pp.left = t;</span><br><span class="line"></span><br><span class="line">        p.parent = pp.parent;</span><br><span class="line">        <span class="keyword">if</span> (pp.parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pp.parent.left.equals(pp)) &#123;</span><br><span class="line">                pp.parent.left = p;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pp.parent.right = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root = p;</span><br><span class="line">        &#125;</span><br><span class="line">        pp.parent = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//lr结构   需要将 p和node左旋成 ll结构</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">lr</span><span class="params">(Node&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        Node&lt;K, V&gt; p = node.parent, pp = p.parent, t;</span><br><span class="line">        <span class="comment">//左旋成ll</span></span><br><span class="line">        t = node.left;</span><br><span class="line">        node.left = p;</span><br><span class="line">        p.right = t;</span><br><span class="line"></span><br><span class="line">        node.parent = p.parent;</span><br><span class="line">        p.parent = node;</span><br><span class="line"></span><br><span class="line">        ll(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//rr双红  p-&gt;黑  pp-&gt; 红 将父节点变成黑色  爷爷节点变成红色  然后左旋</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rr</span><span class="params">(Node&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        Node&lt;K, V&gt; p = node.parent, pp = p.parent, t;</span><br><span class="line">        p.red = <span class="literal">false</span>;</span><br><span class="line">        pp.red = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左旋</span></span><br><span class="line">        t = p.left;</span><br><span class="line">        p.left = pp;</span><br><span class="line">        pp.right = t;</span><br><span class="line"></span><br><span class="line">        p.parent = pp.parent;</span><br><span class="line">        <span class="keyword">if</span> (pp.parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pp.parent.left.equals(pp)) &#123;</span><br><span class="line">                pp.parent.left = p;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pp.parent.right = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root = p;</span><br><span class="line">        &#125;</span><br><span class="line">        pp.parent = p;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//rl结构   需要将 p和node右旋成 rr结构</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rl</span><span class="params">(Node&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        Node&lt;K, V&gt; p = node.parent, pp = p.parent, t;</span><br><span class="line">        <span class="comment">//右旋</span></span><br><span class="line">        t = node.right;</span><br><span class="line">        node.right = p;</span><br><span class="line">        p.left = t;</span><br><span class="line"></span><br><span class="line">        node.parent = p.parent;</span><br><span class="line">        p.parent = node;</span><br><span class="line"></span><br><span class="line">        rr(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue cdn加速配置</title>
    <link href="/2021/05/07/Vue%20cdn%E5%8A%A0%E9%80%9F%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/05/07/Vue%20cdn%E5%8A%A0%E9%80%9F%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="引入CDN"><a href="#引入CDN" class="headerlink" title="引入CDN"></a>引入CDN</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.0.6/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vuex/3.1.0/vuex.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.18.1/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/element-ui/2.13.0/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/js-cookie/2.2.0/js.cookie.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/nprogress/0.2.0/nprogress.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/element-ui/2.13.0/theme-chalk/index.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置vue-config-js"><a href="#配置vue-config-js" class="headerlink" title="配置vue.config.js"></a>配置vue.config.js</h2><p>在module.exports中引入的cdn不需要打包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//此处就是</span></span><br><span class="line">    <span class="attr">externals</span>:&#123;</span><br><span class="line">      <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vuex&#x27;</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;axios&#x27;</span>: <span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;element-ui&#x27;</span>:<span class="string">&#x27;ELEMENT&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;js-cookie&#x27;</span>:<span class="string">&#x27;Cookies&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;nprogress&#x27;</span>:<span class="string">&#x27;NProgress&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="将import到的地方都要注释掉"><a href="#将import到的地方都要注释掉" class="headerlink" title="将import到的地方都要注释掉"></a>将import到的地方都要注释掉</h2><p>store里的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*import Vue from &#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">import Vuex from &#x27;vuex&#x27;*/</span></span><br></pre></td></tr></table></figure><p>router里的 文件里面的Router需要替换成VueRouter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*import Vue from &#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">import Router from &#x27;vue-router&#x27;*/</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createRouter</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// mode: &#x27;history&#x27;, // require service support</span></span><br><span class="line">  <span class="attr">scrollBehavior</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="attr">routes</span>: constantRoutes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同理，引用的js都要把import去除掉</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程之BlockingQueue中 take、offer、put、add的一些比较</title>
    <link href="/2021/05/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BBlockingQueue%E4%B8%AD%20take%E3%80%81offer%E3%80%81put%E3%80%81add%E7%9A%84%E4%B8%80%E4%BA%9B%E6%AF%94%E8%BE%83/"/>
    <url>/2021/05/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BBlockingQueue%E4%B8%AD%20take%E3%80%81offer%E3%80%81put%E3%80%81add%E7%9A%84%E4%B8%80%E4%BA%9B%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>BlockingQueue 方法以四种形式出现，对于不能立即满足但可能在将来某一时刻可以满足的操作，这四种形式的处理方式不同：第一种是抛出一个异常，第二种是返回一个特殊值（null 或 false，具体取决于操作），第三种是在操作可以成功前，无限期地阻塞当前线程，第四种是在放弃前只在给定的最大时间限制内阻塞。第四种的返回值和第二种的一样。<br>下表中总结了这些方法：</p><table><thead><tr><th></th><th>抛出异常</th><th>特殊值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e, time, unit)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time, unit)</td></tr><tr><td>检查</td><td>element()</td><td>peek()</td><td>不可用</td><td>不可用</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程池</title>
    <link href="/2021/05/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2021/05/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="线程池创建"><a href="#线程池创建" class="headerlink" title="线程池创建"></a>线程池创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用给定的初始参数创建一个新的ThreadPoolExecutor。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">int</span> corePoolSize,//线程池的核心线程数量</span></span><br><span class="line"><span class="params">        <span class="type">int</span> maximumPoolSize,//线程池的最大线程数</span></span><br><span class="line"><span class="params">        <span class="type">long</span> keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span></span><br><span class="line"><span class="params">        TimeUnit unit,//时间单位</span></span><br><span class="line"><span class="params">        BlockingQueue&lt;Runnable&gt; workQueue,//任务队列，用来储存等待执行任务的队列</span></span><br><span class="line"><span class="params">        ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可</span></span><br><span class="line"><span class="params">RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span></span><br><span class="line"><span class="params">)</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程池参数："><a href="#线程池参数：" class="headerlink" title="线程池参数："></a>线程池参数：</h2><ul><li><p>corePoolSize：线程池核心线1个数；</p></li><li><p>workQueue：用于保存等待执行的任务的阻塞队列；比如基于数组的有界 <code>ArrayBlockingQueue</code>，基于链表的无界 <code>LinkedBlockingQueue</code>，最多只有一个元素的同步队列 <code>SynchronousQueue</code>，优先级队列 <code>PriorityBlockingQueue</code> 等。</p></li><li><p>maximunPoolSize：线程池最大线程数量。</p></li><li><p>ThreadFactory：创建线程的工厂。</p></li><li><p>RejectedExecutionHandler：饱和策略，当队列满了并且线程个数达到 <code>maximunPoolSize</code> 后采取的策略，比如 <code>AbortPolicy</code> （抛出异常），<code>CallerRunsPolicy</code>（使用调用者所在线程来运行任务），<code>DiscardOldestPolicy</code>（调用 poll 丢弃一个任务，执行当前任务），<code>DiscardPolicy</code>（默默丢弃，不抛出异常）。</p></li><li><p>keeyAliveTime：存活时间。如果当前线程池中的线程数量比核心线程数量要多，并且是闲置状态的话，这些闲置的线程能存活的最大时间。</p></li><li><p>TimeUnit:存活时间的时间单位。</p></li></ul><h2 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h2><p>线程池的状态使用原子Integer变量来存储，高3位记录线程池的状态，剩下的29位记录线程的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用来标记线程池状态（高3位），线程个数（低29位）</span></span><br><span class="line"><span class="comment">//默认是RUNNING状态，线程个数为0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ctl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程个数掩码位数，并不是所有平台int类型是32位，所以准确说是具体平台下Integer的二进制位数-3后的剩余位数才是线程的个数，</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程最大个数(低29位)00011111111111111111111111111111</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAPACITY</span>   <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="线程池状态："><a href="#线程池状态：" class="headerlink" title="线程池状态："></a><strong>线程池状态：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（高3位）：11100000000000000000000000000000</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（高3位）：00000000000000000000000000000000</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（高3位）：00100000000000000000000000000000</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（高3位）：01000000000000000000000000000000</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（高3位）：01100000000000000000000000000000</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="comment">// 获取高三位 运行状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">runStateOf</span><span class="params">(<span class="type">int</span> c)</span>     &#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取低29位 线程个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">workerCountOf</span><span class="params">(<span class="type">int</span> c)</span>  &#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算ctl新值，线程状态 与 线程个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ctlOf</span><span class="params">(<span class="type">int</span> rs, <span class="type">int</span> wc)</span> &#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure><h3 id="线程池状态含义："><a href="#线程池状态含义：" class="headerlink" title="线程池状态含义："></a>线程池状态含义：</h3><ul><li>RUNNING：接受新任务并且处理阻塞队列里的任务；</li><li>SHUTDOWN：拒绝新任务但是处理阻塞队列里的任务；</li><li>STOP：拒绝新任务并且抛弃阻塞队列里的任务，同时会中断正在处理的任务；</li><li>TIDYING：所有任务都执行完（包含阻塞队列里面任务）当前线程池活动线程为 0，将要调用 <code>terminated</code> 方法；</li><li>TERMINATED：终止状态，terminated方法调用完成以后的状态。</li></ul><h3 id="线程池状态转换："><a href="#线程池状态转换：" class="headerlink" title="线程池状态转换："></a>线程池状态转换：</h3><p>​ 1.RUNNING -&gt; SHUTDOWN：显式调用 <code>shutdown()</code> 方法，或者隐式调用了 <code>finalize()</code>，它里面调用了 <code>shutdown()</code> 方法。</p><p>​ 2.RUNNING or SHUTDOWN -&gt; STOP：显式调用 <code>shutdownNow()</code> 方法时候。</p><p>​ 3.SHUTDOWN -&gt; TIDYING：当线程池和任务队列都为空的时候。</p><p>​ 4.STOP -&gt; TIDYING：当线程池为空的时候。</p><p>​ 5.TIDYING -&gt; TERMINATED：当 <code>terminated() hook</code> 方法执行完成时候。</p><h2 id="线程池执行流程"><a href="#线程池执行流程" class="headerlink" title="线程池执行流程"></a>线程池执行流程</h2><p>任务被提交到线程池，会先判断当前线程数量是否小于corePoolSize，如果小于则创建线程来执行提交的任务，否则将任务放入workQueue队列，如果workQueue满了，则判断当前线程数量是否小于maximumPoolSize,如果小于则创建线程执行任务，否则就会调用handler，以表示线程池拒绝接收任务。<br><a href="https://imgtu.com/i/g1Iaxx"><img src="https://z3.ax1x.com/2021/05/07/g1Iaxx.png" alt="g1Iaxx.png"></a></p><h2 id="队列里的任务什么时候执行？"><a href="#队列里的任务什么时候执行？" class="headerlink" title="队列里的任务什么时候执行？"></a>队列里的任务什么时候执行？</h2><p>worker中 runWorker() 一个任务完成后，会取下一个任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">runWorker</span><span class="params">(Worker w)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">wt</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> w.firstTask;</span><br><span class="line">        w.firstTask = <span class="literal">null</span>;</span><br><span class="line">        w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">completedAbruptly</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//getTask() 从队列中获取任务</span></span><br><span class="line">            <span class="keyword">while</span> (task != <span class="literal">null</span> || (task = getTask()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                w.lock();</span><br><span class="line">                <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">                <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">                <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">                <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">                <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                     (Thread.interrupted() &amp;&amp;</span><br><span class="line">                      runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                    !wt.isInterrupted())</span><br><span class="line">                    wt.interrupt();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforeExecute(wt, task);</span><br><span class="line">                    <span class="type">Throwable</span> <span class="variable">thrown</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//执行的是run()方法 而不是start()方法</span></span><br><span class="line">                        task.run();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(x);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterExecute(task, thrown);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    task = <span class="literal">null</span>;</span><br><span class="line">                    w.completedTasks++;</span><br><span class="line">                    w.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            completedAbruptly = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            processWorkerExit(w, completedAbruptly);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Runnable <span class="title function_">getTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">timedOut</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">            <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">                decrementWorkerCount();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">wc</span> <span class="operator">=</span> workerCountOf(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">timed</span> <span class="operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">                &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//是否是阻塞的队列  是使用take()获取任务  不是使用poll</span></span><br><span class="line">                <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> timed ?</span><br><span class="line">                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                    workQueue.take();</span><br><span class="line">                <span class="keyword">if</span> (r != <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                timedOut = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">                timedOut = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="线程池是如何复用的"><a href="#线程池是如何复用的" class="headerlink" title="线程池是如何复用的"></a>线程池是如何复用的</h2><p>在工作线程里直接执行run方法，而不是通过start执行创建线程再执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">//执行的是run()方法 而不是start()方法</span></span><br><span class="line">                   task.run();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                   thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                   thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                   thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(x);</span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   afterExecute(task, thrown);</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreadLocal</title>
    <link href="/2021/05/07/ThreadLocal/"/>
    <url>/2021/05/07/ThreadLocal/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p><strong>ThreadLocal提供一个线程（Thread）局部变量，访问到某个变量的每一个线程都拥有自己的局部变量</strong></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">       <span class="comment">//获取当前线程</span></span><br><span class="line">       <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">       <span class="comment">//获取到ThreadLocalMap对象</span></span><br><span class="line">       <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">       <span class="comment">//使用的懒加载创建的方式</span></span><br><span class="line">       <span class="comment">//当前线程的ThreadLocalMap对象已经存在则将当前ThreadLocal对象和值放入Map当中</span></span><br><span class="line">       <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">           map.set(<span class="built_in">this</span>, value);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       <span class="comment">//创建对象并将当前ThreadLocal对象和值放入Map当中</span></span><br><span class="line">           createMap(t, value);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">threadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//获取ThreadLocalMap的方法，每个线程都维护了一个ThreaLocalMap对象</span></span><br><span class="line">ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="ThreadLocalMap类"><a href="#ThreadLocalMap类" class="headerlink" title="ThreadLocalMap类"></a>ThreadLocalMap类</h2><p><strong>ThreadLocalMap类是ThreadLocal的静态内部类，Entry继承了弱引用，下一次GC就会被回收。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">           <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">           <span class="comment">//TreadLocal对象存储的值</span></span><br><span class="line">           Object value;</span><br><span class="line"><span class="comment">//k为key</span></span><br><span class="line">           Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">               <span class="built_in">super</span>(k);</span><br><span class="line">               value = v;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>ThreadLocalMap中调用的构造函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">       <span class="comment">//entry数组的容量  默认为16</span></span><br><span class="line">           table = <span class="keyword">new</span> <span class="title class_">Entry</span>[INITIAL_CAPACITY];</span><br><span class="line">       <span class="comment">//根据hash与上数组的长度减一算出在数组的位置</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">       <span class="comment">//将ThreadLocal存储到entry数组中</span></span><br><span class="line">           table[i] = <span class="keyword">new</span> <span class="title class_">Entry</span>(firstKey, firstValue);</span><br><span class="line">       <span class="comment">//记录数组的数据量</span></span><br><span class="line">           size = <span class="number">1</span>;</span><br><span class="line">       <span class="comment">//设置扩容阈值，为数组长度的三分之二  threshold = INITIAL_CAPACITY * 2 / 3;  </span></span><br><span class="line">           setThreshold(INITIAL_CAPACITY);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>set方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// We don&#x27;t use a fast path as with get() because it is at</span></span><br><span class="line">           <span class="comment">// least as common to use set() to create new entries as</span></span><br><span class="line">           <span class="comment">// it is to replace existing ones, in which case, a fast</span></span><br><span class="line">           <span class="comment">// path would fail more often than not.</span></span><br><span class="line"></span><br><span class="line">           Entry[] tab = table;</span><br><span class="line">           <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">       <span class="comment">//threadLocalHashCode使用的是斐波那契散列函数</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//在解决hash冲突时，会依次向下遍历，指到找到插入的位置进行插入</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> tab[i];</span><br><span class="line">                e != <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">//i = nextIndex(i, len)  小于len 则返回 i + 1 大于len则返回0</span></span><br><span class="line">                e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">               ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">                   e.value = value;</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (k == <span class="literal">null</span>) &#123;</span><br><span class="line">                   replaceStaleEntry(key, value, i);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           tab[i] = <span class="keyword">new</span> <span class="title class_">Entry</span>(key, value);</span><br><span class="line">       <span class="comment">//设置新的值</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> ++size;</span><br><span class="line">       <span class="comment">//满足条件进行扩容</span></span><br><span class="line">           <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">               rehash();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>0x61c88647是斐波那契散列乘数,它的优点是通过它散列(hash)出来的结果分布会比较均匀，可以很大程度上避免hash冲突，已初始容量16为例，hash并与15位运算计算数组下标结果如下：</p><table><thead><tr><th>hashCode</th><th>数组下标</th></tr></thead><tbody><tr><td>0x61c88647</td><td>7</td></tr><tr><td>0xc3910c8e</td><td>14</td></tr><tr><td>0x255992d5</td><td>5</td></tr><tr><td>0x8722191c</td><td>12</td></tr><tr><td>0xe8ea9f63</td><td>3</td></tr><tr><td>0x4ab325aa</td><td>10</td></tr><tr><td>0xac7babf1</td><td>1</td></tr><tr><td>0xe443238</td><td>8</td></tr><tr><td>0x700cb87f</td><td>15</td></tr></tbody></table><p>总结如下：</p><ol><li>对于某一ThreadLocal来讲，他的索引值i是确定的，在不同线程之间访问时访问的是不同的table数组的同一位置即都为table[i]，只不过这个不同线程之间的table是独立的。</li><li>对于同一线程的不同ThreadLocal来讲，这些ThreadLocal实例共享一个table数组，然后每个ThreadLocal实例在table中的索引i是不同的。</li></ol><h2 id="内存泄漏问题"><a href="#内存泄漏问题" class="headerlink" title="内存泄漏问题"></a>内存泄漏问题</h2><p><a href="https://imgtu.com/i/g1Iu2q"><img src="https://z3.ax1x.com/2021/05/07/g1Iu2q.png" alt="g1Iu2q.png"></a></p><p>我们知道Thread运行时，线程的的一些局部变量和引用使用的内存属于Stack（栈）区，而普通的对象是存储在Heap（堆）区。根据上图，基本分析如下：</p><ul><li>线程运行时，我们定义的TheadLocal对象被初始化，存储在Heap，同时线程运行的栈区保存了指向该实例的引用，也就是图中的ThreadLocalRef</li><li>当ThreadLocal的set&#x2F;get被调用时，虚拟机会根据当前线程的引用也就是CurrentThreadRef找到其对应在堆区的实例，然后查看其对用的TheadLocalMap实例是否被创建，如果没有，则创建并初始化。</li><li>Map实例化之后，也就拿到了该ThreadLocalMap的句柄，然后如果将当前ThreadLocal对象作为key，进行存取操作</li><li>图中的虚线，表示key对ThreadLocal实例的引用是个弱引用</li></ul><h3 id="内存泄漏分析"><a href="#内存泄漏分析" class="headerlink" title="内存泄漏分析"></a>内存泄漏分析</h3><p>根据上一节的内存模型图我们可以知道，由于ThreadLocalMap是以弱引用的方式引用着ThreadLocal，换句话说，就是<strong>ThreadLocal是被ThreadLocalMap以弱引用的方式关联着，因此如果ThreadLocal没有被ThreadLocalMap以外的对象引用，则在下一次GC的时候，ThreadLocal实例就会被回收，那么此时ThreadLocalMap里的一组KV的K就是null</strong>了，因此在没有额外操作的情况下，此处的V便不会被外部访问到，而且<strong>只要Thread实例一直存在，Thread实例就强引用着ThreadLocalMap，因此ThreadLocalMap就不会被回收，那么这里K为null的V就一直占用着内存</strong>。</p><p>综上，发生内存泄露的条件是</p><ul><li>ThreadLocal实例没有被外部强引用，比如我们假设在提交到线程池的task中实例化的ThreadLocal对象，当task结束时，ThreadLocal的强引用也就结束了</li><li>ThreadLocal实例被回收，但是在ThreadLocalMap中的V没有被任何清理机制有效清理</li><li>当前Thread实例一直存在，则会一直强引用着ThreadLocalMap，也就是说ThreadLocalMap也不会被GC</li></ul><p>也就是说，如果Thread实例还在，但是ThreadLocal实例却不在了，则ThreadLocal实例作为key所关联的value无法被外部访问，却还被强引用着，因此出现了内存泄露。</p><blockquote><p>这里要额外说明一下，这里说的内存泄露，是因为对其内存模型和设计不了解，且编码时不注意导致的内存管理失联，而不是有意为之的一直强引用或者频繁申请大内存。比如如果编码时不停的人为塞一些很大的对象，而且一直持有引用最终导致OOM，不能算作ThreadLocal导致的“内存泄露”，只是代码写的不当而已！</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdk LocalDateTime mybatis 空指针解决办法</title>
    <link href="/2021/05/07/jdk%20LocalDateTime%20mybatis%20%E7%A9%BA%E6%8C%87%E9%92%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2021/05/07/jdk%20LocalDateTime%20mybatis%20%E7%A9%BA%E6%8C%87%E9%92%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>引入jar包：</p><ol><li><p>mysql.mysql-connector-java:5.1.39</p></li><li><p>org.mybatis.mybatis:3.5.2</p></li></ol><p>3. org.mybatis.mybatis-spring:2.0.2</p><p>在项目中的mybats升级使用了jdk8的LocalDateTime等后，数据库timesstamp字段有的记录是null，导致查询时出现下面错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column <span class="string">&#x27;UPDATE_TIME&#x27;</span> from result set.  Cause: java.lang.NullPointerException</span><br><span class="line">at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:<span class="number">78</span>)</span><br><span class="line">at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:<span class="number">440</span>)</span><br><span class="line">at com.sun.proxy.$Proxy154.selectList(Unknown Source)</span><br><span class="line">at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:<span class="number">223</span>)</span><br><span class="line">at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:<span class="number">147</span>)</span><br><span class="line">at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:<span class="number">80</span>)</span><br><span class="line">at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:<span class="number">57</span>)</span><br><span class="line">at com.sun.proxy.$Proxy181.find(Unknown Source)</span><br><span class="line">at cn.enn.ygego.sunny.sv.service.online.impl.LogisticsBrandServiceImpl.list(LogisticsBrandServiceImpl.java:<span class="number">67</span>)</span><br><span class="line">at cn.enn.ygego.sunny.sv.controller.online.LogisticsBrandController.list(LogisticsBrandController.java:<span class="number">49</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br></pre></td></tr></table></figure><p>不能把null转换为LocalDateTime。通过跟踪代码，发现问题出在mysql的驱动上，JDBC42ResultSet的getObject代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getObject</span><span class="params">(<span class="type">int</span> columnIndex, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> SQLError.createSQLException(<span class="string">&quot;Type parameter can not be null&quot;</span>, <span class="string">&quot;S1009&quot;</span>, <span class="built_in">this</span>.getExceptionInterceptor());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(LocalDate.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> type.cast(<span class="built_in">this</span>.getDate(columnIndex).toLocalDate());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(LocalDateTime.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> type.cast(<span class="built_in">this</span>.getTimestamp(columnIndex).toLocalDateTime());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(LocalTime.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> type.cast(<span class="built_in">this</span>.getTime(columnIndex).toLocalTime());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (type.equals(OffsetDateTime.class)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> type.cast(OffsetDateTime.parse(<span class="built_in">this</span>.getString(columnIndex)));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (DateTimeParseException var5) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(OffsetTime.class)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> type.cast(OffsetTime.parse(<span class="built_in">this</span>.getString(columnIndex)));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (DateTimeParseException var4) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getObject(columnIndex, type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> type.cast(<span class="built_in">this</span>.getTimestamp(columnIndex).toLocalDateTime());代码中<span class="built_in">this</span>.getTimestamp(columnIndex)返回<span class="literal">null</span>，再次执行toLocalDateTime()，当然报错。</span><br></pre></td></tr></table></figure><p>解决方式升级mysql驱动，我升级到5.1.47，其他版本没有测试，在5.1.47中代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getObject</span><span class="params">(<span class="type">int</span> columnIndex, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> SQLError.createSQLException(<span class="string">&quot;Type parameter can not be null&quot;</span>, <span class="string">&quot;S1009&quot;</span>, <span class="built_in">this</span>.getExceptionInterceptor());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(LocalDate.class)) &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="built_in">this</span>.getDate(columnIndex);</span><br><span class="line">            <span class="keyword">return</span> date == <span class="literal">null</span> ? <span class="literal">null</span> : type.cast(date.toLocalDate());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(LocalDateTime.class)) &#123;</span><br><span class="line">            <span class="type">Timestamp</span> <span class="variable">timestamp</span> <span class="operator">=</span> <span class="built_in">this</span>.getTimestamp(columnIndex);</span><br><span class="line">            <span class="keyword">return</span> timestamp == <span class="literal">null</span> ? <span class="literal">null</span> : type.cast(timestamp.toLocalDateTime());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(LocalTime.class)) &#123;</span><br><span class="line">            <span class="type">Time</span> <span class="variable">time</span> <span class="operator">=</span> <span class="built_in">this</span>.getTime(columnIndex);</span><br><span class="line">            <span class="keyword">return</span> time == <span class="literal">null</span> ? <span class="literal">null</span> : type.cast(time.toLocalTime());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String string;</span><br><span class="line">            <span class="keyword">if</span> (type.equals(OffsetDateTime.class)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    string = <span class="built_in">this</span>.getString(columnIndex);</span><br><span class="line">                    <span class="keyword">return</span> string == <span class="literal">null</span> ? <span class="literal">null</span> : type.cast(OffsetDateTime.parse(string));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (DateTimeParseException var5) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(OffsetTime.class)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    string = <span class="built_in">this</span>.getString(columnIndex);</span><br><span class="line">                    <span class="keyword">return</span> string == <span class="literal">null</span> ? <span class="literal">null</span> : type.cast(OffsetTime.parse(string));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (DateTimeParseException var4) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getObject(columnIndex, type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>swagger忽略方法里参数的方法</title>
    <link href="/2021/05/07/swagger%E5%BF%BD%E7%95%A5%E6%96%B9%E6%B3%95%E9%87%8C%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2021/05/07/swagger%E5%BF%BD%E7%95%A5%E6%96%B9%E6%B3%95%E9%87%8C%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">               .select()</span><br><span class="line">               .apis(RequestHandlerSelectors.any())</span><br><span class="line">               .paths(PathSelectors.any()).build()</span><br><span class="line">               .ignoredParameterTypes(UserInfo.class, HttpSession.class);<span class="comment">//在此忽略参数的class</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ActiveMq</title>
    <link href="/2021/05/07/ActiveMq/"/>
    <url>/2021/05/07/ActiveMq/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="ActiveMq"><a href="#ActiveMq" class="headerlink" title="ActiveMq"></a>ActiveMq</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="直接安装方式"><a href="#直接安装方式" class="headerlink" title="直接安装方式"></a>直接安装方式</h3><ol><li>选择对应的版本下载 <a href="http://activemq.apache.org/components/classic/download/">http://activemq.apache.org/components/classic/download/</a></li><li>配置外网访问，需要将conf&#x2F;jetty.xml 的ip修改为0.0.0.0</li><li>到bin目录下启动 .&#x2F;active start</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>pom引入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActiveMain</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTIVE_URL</span> <span class="operator">=</span> <span class="string">&quot;tcp://139.199.106.104:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;queue01&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException &#123;</span><br><span class="line">        <span class="comment">//1、创建工厂,默认密码是admin/admin</span></span><br><span class="line">        <span class="type">ActiveMQConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(ACTIVE_URL);</span><br><span class="line">        <span class="comment">//2、通过工厂获取connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//3、获取session 第一个参数：是否开启事务   第二参数：签收</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//4、创建目的地  队列或则主题</span></span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、消费者监听消息</span></span><br><span class="line">        <span class="type">MessageConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> session.createConsumer(queue);</span><br><span class="line">        consumer.setMessageListener((message -&gt; &#123;</span><br><span class="line">            <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> (TextMessage) message;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(textMessage.getText());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、创建生成者  发送消息</span></span><br><span class="line">        <span class="type">MessageProducer</span> <span class="variable">producer</span> <span class="operator">=</span> session.createProducer(queue);</span><br><span class="line">        <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> session.createTextMessage(<span class="string">&quot;this is a second message&quot;</span>);</span><br><span class="line">        producer.send(textMessage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后、发送结束 释放资源</span></span><br><span class="line">        producer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息。<br>消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。<br>Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费、其它的则不能消费此消息了。<br>当消费者不存在时，消息会一直保存，直到有消费消费</p><h3 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h3><p>消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。<br>和点对点方式不同，发布到topic的消息会被所有订阅者消费。<br>当生产者发布消息，不管是否有消费者。都不会保存消息</p><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><h3 id="receive方法接受消息"><a href="#receive方法接受消息" class="headerlink" title="receive方法接受消息"></a>receive方法接受消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在接收到消息前会一直阻塞</span></span><br><span class="line"><span class="type">Message</span> <span class="variable">receive</span> <span class="operator">=</span> consumer.receive();</span><br><span class="line"><span class="comment">//在接收到消息前会一直阻塞1s，还没有收到消息就结束等待</span></span><br><span class="line"><span class="type">Message</span> <span class="variable">receive</span> <span class="operator">=</span> consumer.receive(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="消息监听器"><a href="#消息监听器" class="headerlink" title="消息监听器"></a>消息监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">consumer.setMessageListener((message -&gt; &#123;</span><br><span class="line">    <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> (TextMessage) message;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(textMessage.getText());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="整合spring-boot"><a href="#整合spring-boot" class="headerlink" title="整合spring boot"></a>整合spring boot</h2><h3 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--消息队列连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># failover:(tcp://localhost:61616,tcp://localhost:61617)</span></span><br><span class="line"><span class="comment"># tcp://localhost:61616</span></span><br><span class="line"><span class="attr">spring.activemq.broker-url</span>=<span class="string">tcp://localhost:61616</span></span><br><span class="line"><span class="comment">#true 表示使用内置的MQ，false则连接服务器</span></span><br><span class="line"><span class="attr">spring.activemq.in-memory</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#true表示使用连接池；false时，每发送一条数据创建一个连接</span></span><br><span class="line"><span class="attr">spring.activemq.pool.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#连接池最大连接数</span></span><br><span class="line"><span class="attr">spring.activemq.pool.max-connections</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#空闲的连接过期时间，默认为30秒</span></span><br><span class="line"><span class="attr">spring.activemq.pool.idle-timeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="comment">#强制的连接过期时间，与idleTimeout的区别在于：idleTimeout是在连接空闲一段时间失效，而expiryTimeout不管当前连接的情况，只要达到指定时间就失效。默认为0，never</span></span><br><span class="line"><span class="attr">spring.activemq.pool.expiry-timeout</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><h3 id="启动类-provider-，consumer同样"><a href="#启动类-provider-，consumer同样" class="headerlink" title="启动类(provider)，consumer同样"></a>启动类(provider)，consumer同样</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableJms</span> <span class="comment">//启动消息队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderApplication</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jms.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @author uv</span></span><br><span class="line"><span class="comment"> * @date 2018/9/15 14:54</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderController</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//注入存放消息的队列，用于下列方法一</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Queue queue;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//注入springboot封装的工具类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">//方法一：添加消息到消息队列</span></span><br><span class="line">        jmsMessagingTemplate.convertAndSend(queue, name);</span><br><span class="line">        <span class="comment">//方法二：这种方式不需要手动创建queue，系统会自行创建名为test的队列</span></span><br><span class="line">        <span class="comment">//jmsMessagingTemplate.convertAndSend(&quot;test&quot;, name);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.annotation.JmsListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.SendTo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @author uv</span></span><br><span class="line"><span class="comment"> * @date 2018/9/15 18:36</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerService</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 使用JmsListener配置消费者监听的队列，其中name是接收到的消息</span></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;ActiveMQQueue&quot;)</span></span><br><span class="line">    <span class="comment">// SendTo 会将此方法返回的数据, 写入到 OutQueue 中去.</span></span><br><span class="line">    <span class="meta">@SendTo(&quot;SQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleMessage</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功接受Name&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功接受Name&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat日志归档</title>
    <link href="/2021/05/07/Tomcat%E6%97%A5%E5%BF%97%E5%BD%92%E6%A1%A3/"/>
    <url>/2021/05/07/Tomcat%E6%97%A5%E5%BF%97%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="Linux-Tomcat-日志归档"><a href="#Linux-Tomcat-日志归档" class="headerlink" title="Linux Tomcat 日志归档"></a>Linux Tomcat 日志归档</h3><p>配置文件编写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/logrotate.d/tomcat </span><br></pre></td></tr></table></figure><p>输入配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat/logs/catalina.out &#123;  </span><br><span class="line"> copytruncate  </span><br><span class="line"> daily  </span><br><span class="line"> dateext  </span><br><span class="line"> nocompress  </span><br><span class="line"> missingok  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;logs&#x2F;catalina.out是日志文件所在路径</p><p>执行下面的命令生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/logrotate -f /etc/logrotate.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">compress 通过gzip 压缩转储以后的日志</span><br><span class="line">nocompress 不需要压缩时，用这个参数</span><br><span class="line">copytruncate 用于还在打开中的日志文件，把当前日志备份并截断</span><br><span class="line">nocopytruncate 备份日志文件但是不截断</span><br><span class="line">create mode owner group 转储文件，使用指定的文件模式创建新的日志文件</span><br><span class="line">nocreate 不建立新的日志文件</span><br><span class="line">delaycompress 和 compress 一起使用时，转储的日志文件到下一次转储时才压缩</span><br><span class="line">nodelaycompress 覆盖 delaycompress 选项，转储同时压缩。</span><br><span class="line">errors address 专储时的错误信息发送到指定的Email 地址</span><br><span class="line">ifempty 即使是空文件也转储，这个是 logrotate 的缺省选项。</span><br><span class="line">notifempty 如果是空文件的话，不转储</span><br><span class="line">mail address 把转储的日志文件发送到指定的E-mail 地址</span><br><span class="line">nomail 转储时不发送日志文件</span><br><span class="line">olddir directory 转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统</span><br><span class="line">noolddir 转储后的日志文件和当前日志文件放在同一个目录下</span><br><span class="line">prerotate/endscript 在转储以前需要执行的命令可以放入这个对，这两个关键字必须单独成行</span><br><span class="line">postrotate/endscript 在转储以后需要执行的命令可以放入这个对，这两个关键字必须单独成行</span><br><span class="line">daily 指定转储周期为每天</span><br><span class="line">weekly 指定转储周期为每周</span><br><span class="line">monthly 指定转储周期为每月</span><br><span class="line">rotate count 指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份</span><br><span class="line">tabootext [+] list 让logrotate 不转储指定扩展名的文件，缺省的扩展名是：.rpm-orig, .rpmsave, v, 和 ~</span><br><span class="line">size size 当日志文件到达指定的大小时才转储，Size 可以指定 bytes (缺省)以及KB (sizek)或者MB (sizem).</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java代理的实现</title>
    <link href="/2021/05/07/java%E4%BB%A3%E7%90%86%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/05/07/java%E4%BB%A3%E7%90%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Java代理的实现"><a href="#Java代理的实现" class="headerlink" title="Java代理的实现"></a>Java代理的实现</h1><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h6 id="一个接口，两个实现类，代理实现类组合真实实现类"><a href="#一个接口，两个实现类，代理实现类组合真实实现类" class="headerlink" title="一个接口，两个实现类，代理实现类组合真实实现类"></a>一个接口，两个实现类，代理实现类组合真实实现类</h6><p>静态代理，是一种根据上面的理论，很自然会想到的一种不依赖于其他技术的代理模式实现方式。</p><p><strong>接口</strong>（动态代理也是该接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Work</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>目标类</strong>（动态代理也是该目标类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkImpl</span> <span class="keyword">implements</span> <span class="title class_">Work</span>  &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始工作了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>委托类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkProxy</span> <span class="keyword">implements</span> <span class="title class_">Work</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Work work;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WorkProxy</span><span class="params">(Work work)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.work = work;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//执行前操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;开始工作前&quot;</span>);</span><br><span class="line">        work.doWork();</span><br><span class="line">        <span class="comment">//执行后操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;开始工作后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WorkImpl</span> <span class="variable">workImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkImpl</span>();</span><br><span class="line">        <span class="type">Work</span> <span class="variable">work</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkProxy</span>(workImpl);</span><br><span class="line">        work.doWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用过静态代理，那么很容易理解，静态代理存在的缺陷。</p><p>因此，也就出现了动态代理。</p><p><strong>动态代理的动态, 就是可以动态的切换真实实现类, 也就是说可以一个代理类(相同的代码, 相同的增强操作)应对一堆不确定的真实实现类.</strong></p><p><a href="https://imgtu.com/i/g1fLDg"><img src="https://z3.ax1x.com/2021/05/07/g1fLDg.png" alt="g1fLDg.png"></a></p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>jdk动态代理目标类必须要实现接口</p><p>通过java.lang.reflect.Proxy类实现。</p><p>动态代理就是为了解决静态代理不灵活的缺陷而产生的。静态代理是固定的，一旦确定了代码，如果委托类新增一个方法，而这个方法又需要增强，那么就必须在代理类里重写一个带增强的方法。而动态代理可以灵活替换代理方法，动态就是体现在这里。</p><p><strong>委托类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invocation</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际目标类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object realObject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Invocation</span><span class="params">(Object realObject)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.realObject = realObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作前&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(realObject, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;工作后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk原生动态代理</span></span><br><span class="line"><span class="comment"> * 目标类必须要实现接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WorkImpl</span> <span class="variable">work</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkImpl</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">WorkImpl</span>&gt; workClass = work.getClass();</span><br><span class="line">        <span class="type">Work</span> <span class="variable">o</span> <span class="operator">=</span> (Work) Proxy.newProxyInstance(workClass.getClassLoader(), workClass.getInterfaces(), <span class="keyword">new</span> <span class="title class_">Invocation</span>(work));</span><br><span class="line">        o.doWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CGLib动态代理"><a href="#CGLib动态代理" class="headerlink" title="CGLib动态代理"></a>CGLib动态代理</h2><p>CGLib动态代理是一个第三方实现的动态代理类库，不要求被代理类必须实现接口，它采用的是继承被代理类，使用其子类的方式，弥补了被代理类没有接口的不足。</p><p><strong>委托类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Interceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object realObject, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作前&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodProxy.invokeSuper(realObject, objects);<span class="comment">//目标类和方法调用的参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;工作后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CGLib 编译时增强</span></span><br><span class="line"><span class="comment"> * 会生成目标类的子类作为代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在指定目录下生成动态代理类，我们可以反编译看一下里面到底是一些什么东西</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> WorkTest.class.getResource(<span class="string">&quot;/&quot;</span>).toString();</span><br><span class="line">        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY,</span><br><span class="line">                path.substring(path.indexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>));</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//设置目标类</span></span><br><span class="line">        enhancer.setSuperclass(WorkImpl.class);</span><br><span class="line">        <span class="comment">//设置拦截器</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">Interceptor</span>());</span><br><span class="line">        <span class="comment">//生成代理类</span></span><br><span class="line">        <span class="type">Work</span> <span class="variable">work</span> <span class="operator">=</span> (Work) enhancer.create();</span><br><span class="line">        work.doWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Enhancer"><a href="#Enhancer" class="headerlink" title="Enhancer"></a>Enhancer</h3><p>Enhancer指定要代理的目标对象。通过create方法得到代理对象。通过代理实例调用非final方法，方法调用请求会首先转发给MethodInterceptor的intercept</p><h3 id="MethodInterceptor"><a href="#MethodInterceptor" class="headerlink" title="MethodInterceptor"></a>MethodInterceptor</h3><p>通过代理实例调用方法，调用请求都会转发给intercept方法进行增强。</p><h3 id="反编译查看增强的文件"><a href="#反编译查看增强的文件" class="headerlink" title="反编译查看增强的文件"></a>反编译查看增强的文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">MethodInterceptor</span> <span class="variable">var10000</span> <span class="operator">=</span> <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">       <span class="keyword">if</span> (var10000 == <span class="literal">null</span>) &#123;</span><br><span class="line">           CGLIB$BIND_CALLBACKS(<span class="built_in">this</span>);</span><br><span class="line">           var10000 = <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (var10000 != <span class="literal">null</span>) &#123;</span><br><span class="line">           var10000.intercept(<span class="built_in">this</span>, CGLIB$doWork$<span class="number">0</span>$Method, CGLIB$emptyArgs, CGLIB$doWork$<span class="number">0</span>$Proxy);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">super</span>.doWork();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>包装类型和基础类型是如何比较的</title>
    <link href="/2021/05/07/%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E7%9A%84/"/>
    <url>/2021/05/07/%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="基础类型和基础类型比较"><a href="#基础类型和基础类型比较" class="headerlink" title="基础类型和基础类型比较"></a>基础类型和基础类型比较</h1><p>基础类型和基础类型比较使用&#x3D;&#x3D;,直接比较值</p><h1 id="包装类型比较"><a href="#包装类型比较" class="headerlink" title="包装类型比较"></a>包装类型比较</h1><ol><li>使用&#x3D;&#x3D;比较，则比较的是引用指向的地址</li><li>使用equals()方法比较，则比较的是他的值</li></ol><h1 id="基础类型和包装类型比较"><a href="#基础类型和包装类型比较" class="headerlink" title="基础类型和包装类型比较"></a>基础类型和包装类型比较</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line">System.out.println(a == b);<span class="comment">//false   引用指向的地址不一样</span></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">//true  比较基本数据类型的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(c == d);<span class="comment">//true   引用指向的地址相同 自动装箱的Integer进行了缓存，[-128,127]进行了缓存</span></span><br><span class="line">System.out.println(c.equals(d));<span class="comment">//true 基本数据类型的值是相同的</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(e == c);<span class="comment">//true int和Integer比较，Integer会自动拆箱，调用intValue方法, 所以 == 和 equals都肯定为true</span></span><br><span class="line">System.out.println(c.equals(e));<span class="comment">// true Integer使用equals 传入 int,会先装箱成Integer 再使用equals()进行比较</span></span><br></pre></td></tr></table></figure><p>使用javap -c 反汇编命令查看基础类型和包装类型进行比较的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">99</span>: invokevirtual #<span class="number">8</span>                  <span class="comment">// Method java/lang/Integer.intValue:()I   调用intValue获取包装类型的基础类型</span></span><br><span class="line"><span class="number">102</span>: if_icmpne     <span class="number">109</span></span><br><span class="line"><span class="number">105</span>: iconst_1</span><br><span class="line"><span class="number">106</span>: <span class="keyword">goto</span>          <span class="number">110</span></span><br><span class="line"><span class="number">109</span>: iconst_0</span><br><span class="line"><span class="number">110</span>: invokevirtual #<span class="number">5</span>                  <span class="comment">// Method java/io/PrintStream.println:(Z)V</span></span><br><span class="line"><span class="number">113</span>: getstatic     #<span class="number">4</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="number">116</span>: aload_3</span><br><span class="line"><span class="number">117</span>: iload         <span class="number">5</span></span><br><span class="line"><span class="number">119</span>: invokestatic  #<span class="number">7</span>                  <span class="comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer; 调用Integer.valueOf()方法对基础数据类型进行装箱，再传入equals方法里</span></span><br><span class="line"><span class="number">122</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/lang/Integer.equals:(Ljava/lang/Object;)Z</span></span><br><span class="line"><span class="number">125</span>: invokevirtual #<span class="number">5</span>                  <span class="comment">// Method java/io/PrintStream.println:(Z)V</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hashmap</title>
    <link href="/2021/05/07/hashmap/"/>
    <url>/2021/05/07/hashmap/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="红黑树定义和性质"><a href="#红黑树定义和性质" class="headerlink" title="红黑树定义和性质"></a><strong>红黑树定义和性质</strong></h2><p>红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：</p><ul><li>性质1：每个节点要么是黑色，要么是红色。</li><li>性质2：根节点是黑色。</li><li>性质3：每个叶子节点（NIL）是黑色。</li><li>性质4：每个红色结点的两个子结点一定都是黑色。</li><li><strong>性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</strong></li></ul><h2 id="红黑树与平衡二叉树的区别："><a href="#红黑树与平衡二叉树的区别：" class="headerlink" title="红黑树与平衡二叉树的区别："></a><strong>红黑树与平衡二叉树的区别：</strong></h2><p>1、红黑树放弃了追求完全平衡，追求大致平衡，在与平衡二叉树的时间复杂度相差不大的情况下，保证每次插入最多只需要三次旋转就能达到平衡，实现起来也更为简单。</p><p>2、平衡二叉树追求绝对平衡，条件比较苛刻，实现起来比较麻烦，每次插入新节点之后需要旋转的次数不能预知。</p><h2 id="HashMap-中带有初始容量的构造函数"><a href="#HashMap-中带有初始容量的构造函数" class="headerlink" title="HashMap 中带有初始容量的构造函数"></a>HashMap 中带有初始容量的构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="comment">//容量小于0报错</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">//取2的次幂</span></span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>下面这个方法保证了 HashMap 总是使用2的幂作为哈希表的大小</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">比如 cap = <span class="number">17</span></span><br><span class="line">n  =  <span class="number">16</span>  ---&gt; <span class="number">0001</span> <span class="number">0000</span></span><br><span class="line">n |=  n &gt;&gt;&gt;<span class="number">1</span>;        n&gt;&gt;&gt;<span class="number">1</span>  <span class="number">0000</span> <span class="number">1000</span> ;   <span class="number">0001</span> <span class="number">0000</span> | <span class="number">0000</span> <span class="number">1000</span>    = <span class="number">0001</span> <span class="number">1000</span>  将第<span class="number">2</span>位变为<span class="number">1</span>    此时已经有两位为<span class="number">1</span>  </span><br><span class="line">n |=  n &gt;&gt;&gt;<span class="number">2</span>;        n&gt;&gt;&gt;<span class="number">2</span>  <span class="number">0000</span> <span class="number">0110</span> ;   <span class="number">0000</span> <span class="number">0110</span> | <span class="number">0001</span> <span class="number">1000</span>    = <span class="number">0001</span> <span class="number">1110</span>  将第<span class="number">3</span>-<span class="number">4</span>位变为<span class="number">1</span>  此时已经有四位为<span class="number">1</span></span><br><span class="line">.... 以次类推</span><br><span class="line">最后返回<span class="number">32</span></span><br></pre></td></tr></table></figure><p>这里会先-1然后向上比自己大的第一个2的次幂的数<br><a href="https://www.cnblogs.com/xiyixiaodao/p/14483876.html">tableSizeFor图解</a></p><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>5</td><td>8</td></tr><tr><td>15</td><td>16</td></tr><tr><td>16</td><td>16</td></tr><tr><td>17</td><td>32</td></tr><tr><td>33</td><td>64</td></tr></tbody></table><p><strong>resize方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果容量大于最大容量  则将临界值改为int的最大值</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新的容量等于旧的容量*2，新的容量要小于最大容量，并且旧的容量要大于等于默认容量（16） </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                 <span class="comment">//新的临界值为旧的临界值2倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果容量为0，初始化容量等于临界值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">//容量为0，并且临界也为0，则容量和临界值都重新赋值     </span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新的临界值为0 ，重新计算临界值</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//遍历每个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// 进行链表复制</span></span><br><span class="line">                    <span class="comment">// 方法比较特殊： 它并没有重新计算元素在数组中的位置</span></span><br><span class="line">                    <span class="comment">// 而是采用了 原始位置加原数组长度的方法计算得到位置</span></span><br><span class="line">                    <span class="comment">//不需要移动的节点</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    <span class="comment">//需要移动的节点</span></span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                            <span class="comment">// 注意：不是(e.hash &amp; (oldCap-1));而是(e.hash &amp; oldCap)</span></span><br><span class="line">                            <span class="comment">// (e.hash &amp; oldCap) 得到的是 元素的在数组中的位置是否需要移动,示例如下</span></span><br><span class="line">                            <span class="comment">// 示例1：</span></span><br><span class="line">                            <span class="comment">// e.hash=10 0000 1010</span></span><br><span class="line">                            <span class="comment">// oldCap=16 0001 0000</span></span><br><span class="line">                            <span class="comment">//   &amp;   =0  0000 0000       比较高位的第一位 0</span></span><br><span class="line">                            <span class="comment">//结论：元素位置在扩容后数组中的位置没有发生改变</span></span><br><span class="line">                            <span class="comment">// 示例2：</span></span><br><span class="line">                            <span class="comment">// e.hash=17 0001 0001</span></span><br><span class="line">                            <span class="comment">// oldCap=16 0001 0000</span></span><br><span class="line">                            <span class="comment">//   &amp;   =1  0001 0000      比较高位的第一位   1</span></span><br><span class="line">                            <span class="comment">//结论：元素位置在扩容后数组中的位置发生了改变，新的下标位置是原下标位置+原数组长度</span></span><br><span class="line">                            <span class="comment">// (e.hash &amp; (oldCap-1)) 得到的是下标位置,示例如下</span></span><br><span class="line">                            <span class="comment">//   e.hash=10 0000 1010</span></span><br><span class="line">                            <span class="comment">// oldCap-1=15 0000 1111</span></span><br><span class="line">                            <span class="comment">//      &amp;  =10 0000 1010</span></span><br><span class="line">                            <span class="comment">//   e.hash=17 0001 0001</span></span><br><span class="line">                            <span class="comment">// oldCap-1=15 0000 1111</span></span><br><span class="line">                            <span class="comment">//      &amp;  =1  0000 0001</span></span><br><span class="line">                            <span class="comment">//新下标位置</span></span><br><span class="line">                            <span class="comment">//   e.hash=17 0001 0001</span></span><br><span class="line">                            <span class="comment">// newCap-1=31 0001 1111    newCap=32</span></span><br><span class="line">                            <span class="comment">//      &amp;  =17 0001 0001    1+oldCap = 1+16</span></span><br><span class="line">                            <span class="comment">//元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</span></span><br><span class="line">                            <span class="comment">// 0000 0001-&gt;0001 0001</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>treeifyBin方法 链表 转二叉树的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">//如果tab为空 或者 长度小于转换成红黑树的阈值</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">//index   桶的索引</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//hd头节点   tl尾节点</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将链表节点替换为树节点</span></span><br><span class="line">TreeNode&lt;K,V&gt; <span class="title function_">replacementTreeNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将新构建链表转为红黑树</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="built_in">this</span>, next; x != <span class="literal">null</span>; x = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">        x.left = x.right = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//如果根据为null   将链表的第一个节点当作根节点</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根节点的parent为null</span></span><br><span class="line">            x.parent = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//根节点必须是黑色的</span></span><br><span class="line">            x.red = <span class="literal">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> x.key;</span><br><span class="line">            <span class="comment">//当前节点的hash</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> x.hash;</span><br><span class="line">           </span><br><span class="line">            Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="type">int</span> dir, ph;</span><br><span class="line">                <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key;</span><br><span class="line">                <span class="comment">//当前节点的hash值 小于根节点的hash值 将dir标记为-1 </span></span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//当前节点的hash值 大于根节点的hash值 将dir标记为1</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//如果等于  comparableClassFor  如果没有实现CompareAble接口   则</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="comment">//dir小于等于0   则放在左边   大于0 放在右边</span></span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    <span class="comment">//平衡红黑树</span></span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">        Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p;</span><br><span class="line">        <span class="keyword">if</span> ((c = x.getClass()) == String.class) <span class="comment">// bypass checks</span></span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">            <span class="comment">//getGenericInterfaces()方法返回的是该对象的运行时类型“直接实现”的接口，这意味着： </span></span><br><span class="line">            <span class="comment">//返回的一定是接口。</span></span><br><span class="line">            <span class="comment">//必然是该类型自己实现的接口，继承过来的不算。</span></span><br><span class="line">            <span class="comment">//c.getGenericInterfaces() Type[]</span></span><br><span class="line">        <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                <span class="comment">// (t = ts[i]) instanceof ParameterizedType 判断ts[i] 是否是泛型类</span></span><br><span class="line">                <span class="comment">//(p = (ParameterizedType)t).getRawType() == Comparable.class 当前接口是否是Comparable接口</span></span><br><span class="line">                <span class="comment">//获取Comparable&lt;&gt;  里的泛型，里面泛型只能有一个  返回该泛型值c</span></span><br><span class="line">                <span class="keyword">if</span> (((t = ts[i]) <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;</span><br><span class="line">                    ((p = (ParameterizedType)t).getRawType() ==</span><br><span class="line">                     Comparable.class) &amp;&amp;</span><br><span class="line">                    (as = p.getActualTypeArguments()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                    <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果x为null    或者Calss 不一样则不能比较</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (x == <span class="literal">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">            ((Comparable)k).compareTo(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">tieBreakOrder</span><span class="params">(Object a, Object b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="comment">//如果a为null  或 b为null  或 类名相同时    此时无法比较</span></span><br><span class="line">    <span class="comment">//获取标识hashCode进行比较</span></span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">null</span> || b == <span class="literal">null</span> ||</span><br><span class="line">        (d = a.getClass().getName().</span><br><span class="line">         compareTo(b.getClass().getName())) == <span class="number">0</span>)</span><br><span class="line">        d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class="line">             -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>put方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// table未初始化或者长度为0，进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// (n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 桶中已经存在元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 比较桶中第一个元素(数组中的结点)的hash值相等，key相等</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">// 将第一个元素赋值给e，用e来记录</span></span><br><span class="line">                e = p;</span><br><span class="line">        <span class="comment">// hash值不相等，即key不相等；为红黑树结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 放入树中</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 为链表结点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在链表最末插入结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 到达链表的尾部</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 在尾部插入新结点</span></span><br><span class="line">                    p.next = <span class="keyword">new</span> <span class="title class_">Node</span>(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 结点数量达到阈值，转化为红黑树, -1 算上当前节点</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">// 跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断链表中结点的key值与插入的元素的key值是否相等，Key指向的对象相同或者equals相同表示相同的key</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 相等，跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 表示在桶中找到key值、hash值与插入元素相等的结点</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; </span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或者旧值为null</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">//用新值替换旧值</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 访问后回调</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="comment">// 返回旧值</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结构性修改</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 实际大小大于阈值则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 插入后回调</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可达性分析中，可以作为GcRoots的对象</title>
    <link href="/2021/05/07/%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E4%B8%AD%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%9C%E4%B8%BAGcRoots%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/05/07/%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E4%B8%AD%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%9C%E4%B8%BAGcRoots%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（即一般说的native方法）中引用的对象</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Navicat 连接oracle出现 “ORA-03135 Connection Lost Contact”</title>
    <link href="/2021/05/07/%E4%BD%BF%E7%94%A8Navicat%20%E8%BF%9E%E6%8E%A5oracle%E5%87%BA%E7%8E%B0%20%E2%80%9CORA-03135!%20Connection%20Lost%20Contact%E2%80%9D/"/>
    <url>/2021/05/07/%E4%BD%BF%E7%94%A8Navicat%20%E8%BF%9E%E6%8E%A5oracle%E5%87%BA%E7%8E%B0%20%E2%80%9CORA-03135!%20Connection%20Lost%20Contact%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>我使用的是navicat premium版本，之所以用这个是为了能导出数据库表，在连接数据库时候，出现了 “ORA-03135: Connection Lost Contact”，这个是因为navicat通常会在自己的安装路径下包含某个版本的OCI，如果使用navicat连接Oracle服务器时出现ORA-03135错误，大部分是因为navicat本地的OCI版本与Oracle服务器器不符造成的。解决方法就是去OCI的下载页面</p><p><a href="http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html">http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html</a></p><p>下载指定版本的oci，我直接下载的是</p><p>这个版本，下载后直接点击Navicat —工具–选项–其他–OCI</p><p>配置OCI library为刚下载的zip包解压后的跟目录，有个oci文件，直接选中它 ，点击确定–重启Navicat，再次打开Navicat，便显示连接成功</p>]]></content>
    
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux中crontab的坑</title>
    <link href="/2021/05/07/Linux%E4%B8%ADcrontab%E7%9A%84%E5%9D%91/"/>
    <url>/2021/05/07/Linux%E4%B8%ADcrontab%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>linux的crontab表达式不支持秒，从分钟开始的，有些也不支持问号</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在yml中配置map如果key中含有/、 &#92;、*等特殊字符怎么处理？如何转义？</title>
    <link href="/2021/05/07/%E5%9C%A8yml%E4%B8%AD%E9%85%8D%E7%BD%AEmap%E5%A6%82%E6%9E%9Ckey%E4%B8%AD%E5%90%AB%E6%9C%89!%E3%80%81%20!%E3%80%81!%E7%AD%89%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F%E5%A6%82%E4%BD%95%E8%BD%AC%E4%B9%89%EF%BC%9F/"/>
    <url>/2021/05/07/%E5%9C%A8yml%E4%B8%AD%E9%85%8D%E7%BD%AEmap%E5%A6%82%E6%9E%9Ckey%E4%B8%AD%E5%90%AB%E6%9C%89!%E3%80%81%20!%E3%80%81!%E7%AD%89%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F%E5%A6%82%E4%BD%95%E8%BD%AC%E4%B9%89%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>在yml配置map如果key中含有 \ * 等特殊字符，key 需要加 “[ ]“<br><a href="https://imgtu.com/i/g1DaFS"><img src="https://z3.ax1x.com/2021/05/07/g1DaFS.png" alt="g1DaFS.png"></a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filter:</span></span><br><span class="line">  <span class="attr">filterChainDefinitionMap:</span></span><br><span class="line">   &#123;<span class="string">&quot;[/advertising/*]&quot;</span><span class="string">:</span> <span class="string">&#x27;perms[公告管理]&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;[/hotelmanagement/*]&quot;</span><span class="string">:</span> <span class="string">&#x27;perms[入住管理]&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;[/broadband/*]&quot;</span><span class="string">:</span> <span class="string">&#x27;perms[报装报修]&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;[/yellowpages/*]&quot;</span><span class="string">:</span> <span class="string">&#x27;perms[黄页管理]&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>foreach移除元素时是如何报错的</title>
    <link href="/2021/03/30/foreach%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0%E6%97%B6%E6%98%AF%E5%A6%82%E4%BD%95%E6%8A%A5%E9%94%99%E7%9A%84/"/>
    <url>/2021/03/30/foreach%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0%E6%97%B6%E6%98%AF%E5%A6%82%E4%BD%95%E6%8A%A5%E9%94%99%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : list) &#123;</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">            <span class="keyword">if</span> (integer == <span class="number">5</span>)&#123;</span><br><span class="line">                list.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用javap -v 工具可以看到foreach语法糖实际的工作原理是使用的是iterator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class java/util/ArrayList</span></span><br><span class="line">  <span class="number">3</span>: dup</span><br><span class="line">  <span class="number">4</span>: invokespecial #<span class="number">3</span>                  <span class="comment">// Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  <span class="number">7</span>: astore_1</span><br><span class="line">  <span class="number">8</span>: aload_1</span><br><span class="line">  <span class="number">9</span>: iconst_1</span><br><span class="line"> <span class="number">10</span>: invokestatic  #<span class="number">4</span>                  <span class="comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line"> <span class="number">13</span>: invokeinterface #<span class="number">5</span>,  <span class="number">2</span>            <span class="comment">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span></span><br><span class="line"> <span class="number">18</span>: pop</span><br><span class="line"> <span class="number">19</span>: aload_1</span><br><span class="line"> <span class="number">20</span>: iconst_2</span><br><span class="line"> <span class="number">21</span>: invokestatic  #<span class="number">4</span>                  <span class="comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line"> <span class="number">24</span>: invokeinterface #<span class="number">5</span>,  <span class="number">2</span>            <span class="comment">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span></span><br><span class="line"> <span class="number">29</span>: pop</span><br><span class="line"> <span class="number">30</span>: aload_1</span><br><span class="line"> <span class="number">31</span>: iconst_3</span><br><span class="line"> <span class="number">32</span>: invokestatic  #<span class="number">4</span>                  <span class="comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line"> <span class="number">35</span>: invokeinterface #<span class="number">5</span>,  <span class="number">2</span>            <span class="comment">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span></span><br><span class="line"> <span class="number">40</span>: pop</span><br><span class="line"> <span class="number">41</span>: aload_1</span><br><span class="line"> <span class="number">42</span>: iconst_4</span><br><span class="line"> <span class="number">43</span>: invokestatic  #<span class="number">4</span>                  <span class="comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line"> <span class="number">46</span>: invokeinterface #<span class="number">5</span>,  <span class="number">2</span>            <span class="comment">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span></span><br><span class="line"> <span class="number">51</span>: pop</span><br><span class="line"> <span class="number">52</span>: aload_1</span><br><span class="line"> <span class="number">53</span>: iconst_5</span><br><span class="line"> <span class="number">54</span>: invokestatic  #<span class="number">4</span>                  <span class="comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line"> <span class="number">57</span>: invokeinterface #<span class="number">5</span>,  <span class="number">2</span>            <span class="comment">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span></span><br><span class="line"> <span class="number">62</span>: pop</span><br><span class="line"> <span class="number">63</span>: aload_1</span><br><span class="line"> <span class="number">64</span>: invokeinterface #<span class="number">6</span>,  <span class="number">1</span>            <span class="comment">// InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;</span></span><br><span class="line"> <span class="number">69</span>: astore_2</span><br><span class="line"> <span class="number">70</span>: aload_2</span><br><span class="line"> <span class="number">71</span>: invokeinterface #<span class="number">7</span>,  <span class="number">1</span>            <span class="comment">// InterfaceMethod java/util/Iterator.hasNext:()Z</span></span><br><span class="line"> <span class="number">76</span>: ifeq          <span class="number">122</span></span><br><span class="line"> <span class="number">79</span>: aload_2</span><br><span class="line"> <span class="number">80</span>: invokeinterface #<span class="number">8</span>,  <span class="number">1</span>            <span class="comment">// InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;</span></span><br><span class="line"> <span class="number">85</span>: checkcast     #<span class="number">9</span>                  <span class="comment">// class java/lang/Integer</span></span><br><span class="line"> <span class="number">88</span>: astore_3</span><br><span class="line"> <span class="number">89</span>: getstatic     #<span class="number">10</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"> <span class="number">92</span>: aload_3</span><br><span class="line"> <span class="number">93</span>: invokevirtual #<span class="number">11</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"> <span class="number">96</span>: aload_3</span><br><span class="line"> <span class="number">97</span>: invokevirtual #<span class="number">12</span>                 <span class="comment">// Method java/lang/Integer.intValue:()I</span></span><br><span class="line"><span class="number">100</span>: iconst_5</span><br><span class="line"><span class="number">101</span>: if_icmpne     <span class="number">119</span></span><br><span class="line"><span class="number">104</span>: aload_1</span><br><span class="line"><span class="number">105</span>: <span class="keyword">new</span>           #<span class="number">9</span>                  <span class="comment">// class java/lang/Integer</span></span><br><span class="line"><span class="number">108</span>: dup</span><br><span class="line"><span class="number">109</span>: iconst_5</span><br><span class="line"><span class="number">110</span>: invokespecial #<span class="number">13</span>                 <span class="comment">// Method java/lang/Integer.&quot;&lt;init&gt;&quot;:(I)V</span></span><br><span class="line"><span class="number">113</span>: invokeinterface #<span class="number">14</span>,  <span class="number">2</span>           <span class="comment">// InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z</span></span><br><span class="line"><span class="number">118</span>: pop</span><br><span class="line"><span class="number">119</span>: <span class="keyword">goto</span>          <span class="number">70</span></span><br><span class="line"><span class="number">122</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>编译过来的代码应该是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">           <span class="keyword">if</span> (next == <span class="number">5</span>)&#123;</span><br><span class="line">               list.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>首先会调用hasNext()方法进行判断,会判断当前的游标和集合的长度是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> cursor != size;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>在进行next遍历时,会首先进行校验checkForComodification，这个方法会比较初始化迭代器时数组修改的次数和当前修改的次数是否一致，不一致则报错，初始化迭代器前进行了5次add方法此时modCount的为5，expectedModCount初始话为5，在进行list.remove(new Integer(5))后modCount加一后成6，在调用hasNext的时候是返回的true，cursor为5，size是6，cursor !&#x3D; 6返回的是true，在进行next()的checkForComodification方法时，modCount&#x3D;6,expectedModCount &#x3D;5,modCount!&#x3D;expectedModCount 报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">           checkForComodification();</span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">           Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">           cursor = i + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//ArrayList迭代器初始话方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">       <span class="type">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
